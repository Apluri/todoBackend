{"version":3,"sources":["components/TitleComponent.js","components/Header.js","components/TodoList.js","components/SearchBar.js","components/Sort.js","components/Home.js","components/Folders.js","components/Settings.js","components/AddTodo.js","components/LeftNav.js","components/Layout.js","components/TaskViewEdit.js","components/TaskViewShow.js","components/TaskView.js","App.js","index.js"],"names":["TitleComponent","url","useLocation","pathname","getTitle","Header","className","TodoList","selectedFolder","todos","folders","handleDelete","postTaskHandler","setSelectedTask","useState","itemsToPrint","history","useHistory","sqlDateToDateString","d","temp","Date","getDate","slice","getMonth","renderColumns","todo","map","index","renderTitle","renderDescription","timeCreated","renderDeadLine","renderFolder","folder_id","isDone","title","description","deadline","id","length","item","indexOf","name","renderDeleteButton","Icon","onClick","renderIsDone","Checkbox","checked","Boolean","onChange","e","event","task","editedTask","handleChange","inputProps","undefined","push","wrapperFunction","printTodos","SearchBar","searchData","currInput","setCurrInput","onSubmit","preventDefault","handleSubmit","type","placeholder","value","target","Sort","sortAscending","sortTodosHandler","setSortAscending","currSort","printPrettierSelectedSort","Home","selectFolder","Folders","handleFolderDelete","postFolderHandler","setSelectedFolder","dropdownRef","useRef","folderListActive","setFolderListActive","closeFolderList","folderCurrInput","setFolderCurrInput","isActive","setIsActive","useEffect","handleClick","current","contains","document","addEventListener","removeEventListener","submitFolder","ref","folder","Settings","deleteAllTasks","deleteAllFolders","AddTodo","setTodos","navSize","dCurrInput","setDCurrInput","taskFolderId","setTaskFolderId","folderNamePrint","setFolderNamePrint","calendarActive","setCalendarActive","closeFolder","calendarRef","tzoffset","v","offSet","getTimezoneOffset","setHours","toISOString","split","newTodo","isNaN","addFolderWrapper","toDateString","locale","LeftNav","handleNavSizeChange","closeNav","style","width","exact","to","activeClassName","Layout","props","children","TaskViewEdit","selectedTask","toggleMode","redirect","calendarValue","setCalendarValue","TaskViewShow","TaskView","editMode","setEditMode","App","queryArgs","setQueryArgs","setCurrSort","setFolders","fetchData","str","a","sortTodos","tasks","table","arr","sortFunc","b","sort","fetchTable","query","axios","get","response","data","Promise","all","then","catch","console","log","post","delete","res","status","setNavSize","smallScreen","useMediaQuery","CloseNav","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"uSA0BeA,EAvBQ,WACrB,IAAMC,EAAMC,cAmBZ,OAAO,6BAjBU,WACf,OAAQD,EAAIE,UACV,IAAK,IACH,MAAO,QACT,IAAK,WACH,MAAO,UACT,IAAK,YACH,MAAO,WACT,IAAK,OACH,MAAO,WACT,IAAK,QACH,MAAO,OACT,QACE,MAAO,2BAIDC,MCbCC,EAPA,WACb,OACE,qBAAKC,UAAU,SAAf,SACE,cAAC,EAAD,O,kBCuKSC,EAzKE,SAAC,GAOX,IANLC,EAMI,EANJA,eACAC,EAKI,EALJA,MACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,gBACI,EAEoCC,mBAAS,CAAC,EAAG,EAAG,IAFpD,mBAEGC,EAFH,KAGAC,GAHA,KAGUC,eAwBVC,EAAsB,SAACC,GACzB,GAAU,OAANA,EAAY,CACd,IAAIC,EAAO,IAAIC,KAAKF,GAKpB,MAJc,WAAO,IAAMC,EAAKE,WAAWC,OAAO,GAApC,aACZ,KACCH,EAAKI,WAAa,IACnBD,OAAO,GAHK,KAMd,MAAO,IA2HX,OAAO,sBAAKjB,UAAU,QAAf,cAxFY,WACjB,IAAMmB,EAAgB,SAACC,GACrB,OACE,mCACGX,EAAaY,KAAI,SAACC,GACjB,OAAQA,GACN,KAAK,EACH,OAAO,8BAAMC,EAAYH,KAC3B,KAAK,EACH,OAAO,oCAAOI,EAAkBJ,MAGlC,KAAK,EACH,OAAO,oCAAOA,EAAKK,eACrB,KAAK,EACH,OAAO,8BAAMC,EAAeN,KAE9B,KAAK,EACH,OAAO,oCAAOO,EAAaP,EAAKQ,cAClC,QACE,OAAO,gDAMbL,EAAc,SAACH,GACnB,OACE,qBAAKpB,UAAWoB,EAAKS,OAAS,YAAc,OAA5C,SAAqDT,EAAKU,SAGxDN,EAAoB,SAACJ,GACzB,OAAO,qCAAGA,EAAKW,YAAR,QAEHL,EAAiB,SAACN,GACtB,OACE,sBAAKpB,UAAU,YAAf,cAA6BY,EAAoBQ,EAAKY,UAAtD,QAIEL,EAAe,SAACM,GACpB,OAAuB,IAAnB7B,EAAQ8B,QAAuB,OAAPD,EAAoB,KACzC7B,EAAQA,EAAQiB,KAAI,SAACc,GAAD,OAAUA,EAAKF,MAAIG,QAAQH,IAAKI,MAEvDC,EAAqB,SAAClB,GAC1B,OACE,mCACE,cAACmB,EAAA,EAAD,CAAMvC,UAAU,cAAcwC,QAAS,kBAAMnC,EAAae,EAAKa,UAI/DQ,EAAe,SAACrB,GACpB,OACE,mCACE,cAACsB,EAAA,EAAD,CACE1C,UAAU,YACV2C,QAASC,QAAQxB,EAAKS,QACtBgB,SAAU,SAACC,GAAD,OA/GC,SAACC,EAAOC,GAE3B,IAAMC,EAAU,eAAQD,GACxBC,EAAWpB,QAAUoB,EAAWpB,OAChCvB,EAAgB2C,GA2GSC,CAAaJ,EAAG1B,IACjC+B,WAAY,CAAE,aAAc,oCAMpC,OACE,mCACGhD,EAAMkB,KACL,SAACD,GAAD,OAhIca,EAiICb,EAAKQ,WAhIA,OAAnB1B,QAA8CkD,IAAnBlD,GAE9BA,EAAe+B,KAAOA,IA+HhB,qCACE,uBACA,sBAAKjC,UAAU,YAAf,UACE,gCAAMyC,EAAarB,GAAnB,OACA,qBACEpB,UAAU,iBACVwC,QAAS,kBA9IL,SAACpB,GACrBb,EAAgBa,GAEhBV,EAAQ2C,KAAK,SA2IkBC,CAAgBlC,IAFjC,SAIGD,EAAcC,KAEjB,8BAAMkB,EAAmBlB,OARKA,EAAKa,OApI9B,IAACA,OAqJUsB,OC1InBC,EA9BG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACFjD,mBAAS,IADP,mBAC7BkD,EAD6B,KAClBC,EADkB,KA4BpC,OAAO,qBAAK3D,UAAU,aAAf,SAZH,sBAAM4D,SAAU,SAACd,GAAD,OAZG,SAACA,GAEpBA,EAAEe,iBACEH,EAAUxB,OAAS,GACrBuB,EAAWC,GACXC,EAAa,KAGbF,EAAW,MAIUK,CAAahB,IAApC,SACE,qBAAK9C,UAAU,gBAAf,SACE,uBACE+D,KAAK,OACLC,YAAY,SACZC,MAAOP,EACPb,SAAU,SAACC,GAAD,OAAOa,EAAab,EAAEoB,OAAOD,iBC8BpCE,EAlDF,SAAC,GAKP,IAJLC,EAII,EAJJA,cACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,SAiBA,OACE,sBAAKvE,UAAU,OAAf,iBAEE,sBAAKA,UAAU,WAAf,UACE,wBAAQA,UAAU,UAAlB,SAnB4B,SAACuE,GACjC,OAAQA,GACN,IAAK,QACH,MAAO,QACT,IAAK,cACH,MAAO,eACT,IAAK,SACH,MAAO,SACT,IAAK,WACH,MAAO,WACT,QACE,MAAO,UASJC,CAA0BD,KAE7B,sBAAKvE,UAAU,mBAAf,UACE,wBAAQwC,QAAS,kBAAM6B,EAAiB,UAAxC,mBACA,wBAAQ7B,QAAS,kBAAM6B,EAAiB,gBAAxC,0BAGA,wBAAQ7B,QAAS,kBAAM6B,EAAiB,aAAxC,sBACA,wBAAQ7B,QAAS,kBAAM6B,EAAiB,WAAxC,0BAGJ,qBAAKrE,UAAU,QAAf,SACE,cAACuC,EAAA,EAAD,CACEvC,UAAWoE,EAAgB,iBAAmB,mBAC9C5B,QAAS,WACP8B,GAAkBF,GAClBC,EAAiBE,YCJdE,EApCF,SAAC,GAWP,IAVLtE,EAUI,EAVJA,MACAC,EASI,EATJA,QACAC,EAQI,EARJA,aACAC,EAOI,EAPJA,gBACAC,EAMI,EANJA,gBACA8D,EAKI,EALJA,iBACAZ,EAII,EAJJA,WACAW,EAGI,EAHJA,cACAE,EAEI,EAFJA,iBACAC,EACI,EADJA,SAEA,OACE,sBAAKvE,UAAU,UAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,cAAC,EAAD,CACEoE,cAAeA,EACfC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,SAAUA,IAEZ,cAAC,EAAD,CAAWd,WAAYA,OAGzB,cAAC,EAAD,CACEiB,aAAc,KACdvE,MAAOA,EACPC,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,EACjBC,gBAAiBA,QCwFVoE,EAxHC,SAAC,GASV,IARLxE,EAQI,EARJA,MACAC,EAOI,EAPJA,QACAC,EAMI,EANJA,aACAC,EAKI,EALJA,gBACAC,EAII,EAJJA,gBACA8D,EAGI,EAHJA,iBACAO,EAEI,EAFJA,mBACAC,EACI,EADJA,kBACI,EACwCrE,mBAAS,MADjD,mBACGN,EADH,KACmB4E,EADnB,KAGEC,EAAcC,iBAAO,MAHvB,EAI4CxE,oBAAS,GAJrD,mBAIGyE,EAJH,KAIqBC,EAJrB,KAMEC,EAAkBH,mBANpB,EAO0CxE,mBAAS,IAPnD,mBAOG4E,EAPH,KAOoBC,EAPpB,OAS4B7E,oBAAS,GATrC,mBASG8E,EATH,KASaC,EATb,KAUJC,qBAAU,WACR,IAAMC,EAAc,SAAC3C,GAEdqC,EAAgBO,QAAQC,SAAS7C,EAAEoB,SAClCe,GACFC,GAAqBD,IAO3B,OAFAW,SAASC,iBAAiB,YAAaJ,GAEhC,WACLG,SAASE,oBAAoB,YAAaL,MAE3C,CAACR,IACJ,IAIMc,EAAe,WAInBlB,EAHkB,CAChBxC,KAAM+C,KAIV,OACE,sBAAKpF,UAAU,UAAf,UACE,sBAAKA,UAAU,0BAA0BgG,IAAKb,EAA9C,UACE,sBAAKnF,UAAU,sBAAf,UACE,cAACuC,EAAA,EAAD,CACEvC,UAAU,oBACVwC,QAAS,kBAAM0C,GAAqBD,MAElB,OAAnB/E,EAAA,WACOA,EAAemC,MACnB,yBAGN,uBAEA,qBAAKrC,UAAU,UAAf,SACE,qBACEgG,IAAKjB,EACL/E,UAAS,eAAUiF,EAAmB,SAAW,YAFnD,SAIE,+BACE,+BACE,8CACA,sBAAKjF,UAAU,wBAAf,UACE,+BACE,uBACE+D,KAAK,OACLC,YAAY,eACZC,MAAOmB,EACPvC,SAAU,SAACC,GAAD,OAAOuC,EAAmBvC,EAAEoB,OAAOD,YAGjD,cAAC1B,EAAA,EAAD,CACEvC,UAAU,oBACVwC,QAAS,kBA3CzBuD,SACAR,GAAaD,YA8CH,8BACGlF,EAAQiB,KAAI,SAAC4E,GAAD,OACX,6BACE,sBAAKjG,UAAU,yBAAf,UACE,wBACEA,UAAU,cACVwC,QAAS,kBAAMsC,EAAkBmB,IAFnC,SAIGA,EAAO5D,OAEV,qBAAKrC,UAAU,gBAAf,SACE,cAACuC,EAAA,EAAD,CACEvC,UAAU,cACVwC,QAAS,kBAAMoC,EAAmBqB,EAAOhE,aAXxCgE,EAAOhE,mBAsB5B,cAAC,EAAD,CACE/B,eAAgBA,EAChBC,MAAOA,EACPC,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,EACjBC,gBAAiBA,EACjB8D,iBAAkBA,QChGX6B,EAnBE,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,iBAMlC,OACE,qBAAKpG,UAAU,UAAf,SACE,sBAAKA,UAAU,WAAf,UACE,wBAAQwC,QAAS,kBAAM2D,KAAvB,8BAEA,wBAAQ3D,QAAS,kBAAM4D,KAAvB,gCAEA,wBAAQ5D,QAAS,kBAXrB2D,SACAC,KAUI,8B,QCgMOC,EA3MC,SAAC,GAOX,EANJlG,MAMI,EALJmG,SAKK,IAJLlG,EAII,EAJJA,QAEAE,GAEI,EAHJiG,QAGI,EAFJjG,iBACAuE,EACI,EADJA,kBACI,EAE8BrE,mBAAS,IAFvC,mBAEGkD,EAFH,KAEcC,EAFd,OAIgCnD,mBAAS,IAJzC,mBAIGgG,EAJH,KAIeC,EAJf,OAMoCjG,mBAAS,MAN7C,mBAMGkG,EANH,KAMiBC,EANjB,OAO0CnG,mBAAS,IAPnD,mBAOG4E,EAPH,KAOoBC,EAPpB,OAS0C7E,mBAAS,IATnD,mBASGoG,EATH,KASoBC,EATpB,OAWsBrG,mBAAS,MAX/B,mBAWGyD,EAXH,KAWUpB,EAXV,OAc4BrC,oBAAS,GAdrC,mBAcG8E,EAdH,KAcaC,EAdb,OAgBwC/E,oBAAS,GAhBjD,mBAgBGsG,EAhBH,KAgBmBC,EAhBnB,KAmBEC,EAAchC,iBAAO,MACrBiC,EAAcjC,iBAAO,MACrBD,EAAcC,iBAAO,MAS3BQ,qBAAU,WACR,IAAMC,EAAc,SAAC3C,GAEdkE,EAAYtB,QAAQC,SAAS7C,EAAEoB,UAC9BoB,GACFC,GAAaD,GAEXwB,GACFC,GAAmBD,KAOzB,OAFAlB,SAASC,iBAAiB,YAAaJ,GAEhC,WACLG,SAASE,oBAAoB,YAAaL,MAE3C,CAACH,EAAUwB,IAId,IAOIpG,EAAUC,cAIVuG,EAAW,SAACC,GACd,IAAIC,EAASD,EAAEE,oBAAsB,GAMrC,OALID,EAAS,IACXA,GAA2B,EAATA,GAEpBD,EAAEG,SAASF,GACXD,EAAIA,EAAEI,cAAcC,MAAM,KAAK,IAQ3B1D,EAAe,SAAChB,GAEpBA,EAAEe,iBAGF,IAAM4D,EAAU,CACd3F,MAAO4B,EACP3B,YAAayE,EACbxE,SAAoB,OAAViC,EAAiB,KAAOiD,EAASjD,GAC3CrC,UAAW8E,GAEbpG,EAAgBmH,GAGhB9D,EAAa,IAIbjD,EAAQ2C,KAAK,MAIT0C,EAAe,WAInBlB,EAHkB,CAChBxC,KAAM+C,KAIV,OACE,sBAAKpF,UAAU,UAAf,UACE,sBAAKA,UAAU,WAAf,UACE,cAACuC,EAAA,EAAD,CAAMvC,UAAU,qBAAqBwC,QAASsB,IAC9C,sBAAMF,SAAUE,EAAhB,SACE,uBACEC,KAAK,OACLC,YAAY,aACZC,MAAOP,EACPb,SAAU,SAACC,GAAD,OAAOa,EAAab,EAAEoB,OAAOD,YAG3C,sBAAML,SAAUE,EAAhB,SACE,qBAAK9D,UAAU,kBAAf,SACE,0BACE+D,KAAK,OACLC,YAAY,8BACZC,MAAOuC,EACP3D,SAAU,SAACC,GAAD,OAAO2D,EAAc3D,EAAEoB,OAAOD,iBAMhD,sBAAKjE,UAAU,0BAA0BgG,IAAKgB,EAA9C,UACE,uBACA,sBAAKhH,UAAU,sBAAf,UACE,cAACuC,EAAA,EAAD,CAAMvC,UAAU,oBAAoBwC,QAAS,kBA5G/CsE,GACFC,GAAmBD,QAErBvB,GAAaD,MA0Ga,IAAnBsB,EAAwB,qBAAuBA,KAElD,qBAAK5G,UAAU,UAAf,SACE,qBACEgG,IAAKjB,EACL/E,UAAS,eAAUsF,EAAW,SAAW,YAF3C,SAIE,+BACE,+BACE,8CAAqB,IACrB,sBAAKtF,UAAU,wBAAf,UACE,sBAAM4D,SAAUE,EAAhB,SACE,uBACEC,KAAK,OACLC,YAAY,eACZC,MAAOmB,EACPvC,SAAU,SAACC,GAAD,OAAOuC,EAAmBvC,EAAEoB,OAAOD,YAGjD,cAAC1B,EAAA,EAAD,CACEvC,UAAU,oBACVwC,QAAS,kBAAMuD,aAIrB,8BACG3F,EAAQiB,KAAI,SAAC4E,GAAD,OACX,6BACE,wBACEjG,UAAU,cACVwC,QAAS,kBA/GJ,SAACyD,GACxByB,MAAMzB,EAAOhE,IAAM8D,IAAiBY,EAAgBV,EAAOhE,IAC3D4E,EAAmBZ,EAAO5D,MAC1BkD,GAAY,GA4GqBoC,CAAiB1B,IAFlC,SAIGA,EAAO5D,QALH4D,EAAOhE,gBAa1B,uBACA,qBAAKjC,UAAU,sBAAf,SACE,sBAAKA,UAAU,wBAAf,UACE,cAACuC,EAAA,EAAD,CACEvC,UAAU,iBACVwC,QAAS,kBAAMuE,GAAmBD,MAEzB,OAAV7C,EAAiB,mBAAqBA,EAAM2D,oBAGjD,qBAAK5H,UAAU,qBAAf,SACE,qBACEgG,IAAKiB,EACLjH,UAAS,eAAU8G,EAAiB,SAAW,YAFjD,SAIE,cAAC,IAAD,CAAU7C,MAAO,KAAM4D,OAAQ,QAAShF,SAAUA,eClJ/CiF,EA/CC,SAAC,GAAgD,IAA9CvB,EAA6C,EAA7CA,QAASwB,EAAoC,EAApCA,oBAAqBC,EAAe,EAAfA,SAC3CtH,EAAUC,cAKd,OACE,gCACE,qBAAKX,UAAU,eAAeiI,MAAO,CAAEC,MAAO3B,GAA9C,SACE,sBAAKvG,UAAU,SAAf,UACE,eAAC,IAAD,CACEmI,OAAK,EACLC,GAAI,IACJpI,UAAU,UACVqI,gBAAiB,SAJnB,UAME,cAAC9F,EAAA,EAAD,CAAMvC,UAAU,eANlB,WASA,eAAC,IAAD,CACEoI,GAAI,WACJpI,UAAU,UACVqI,gBAAiB,SAHnB,UAKE,cAAC9F,EAAA,EAAD,CAAMvC,UAAU,sBALlB,aAQA,eAAC,IAAD,CACEoI,GAAI,YACJpI,UAAU,UACVqI,gBAAiB,SAHnB,UAKE,cAAC9F,EAAA,EAAD,CAAMvC,UAAU,cALlB,mBAUJ,qBAAKA,UAAU,aAAf,SACE,cAACuC,EAAA,EAAD,CAAMvC,UAAU,aAAawC,QAAS,kBAAMuF,SAE9C,qBAAK/H,UAAU,UAAf,SACE,cAACuC,EAAA,EAAD,CAAMvC,UAAU,oBAAoBwC,QAAS,kBAtCjDwF,SACAtH,EAAQ2C,KAAK,iBCLFiF,EAJA,SAACC,GAAD,OACb,qBAAKvI,UAA6B,SAAlBuI,EAAMhC,QAAqB,OAAS,GAApD,SAAyDgC,EAAMC,YCmOlDC,EAlOM,SAAC,GASf,IARLrI,EAQI,EARJA,QACAsI,EAOI,EAPJA,aACAnI,EAMI,EANJA,gBACAD,EAKI,EALJA,gBACAuE,EAII,EAJJA,kBACA8D,EAGI,EAHJA,WACAtI,EAEI,EAFJA,aACAuI,EACI,EADJA,SACI,EAY8BpI,mBAASkI,EAAa5G,OAZpD,mBAYG4B,EAZH,KAYcC,EAZd,OAegCnD,mBAASkI,EAAa3G,aAftD,mBAeGyE,EAfH,KAeeC,EAff,OAkBsCjG,mBACd,OAA1BkI,EAAa1G,SAAoB,KAAO,IAAIjB,KAAK2H,EAAa1G,WAnB5D,mBAkBG6G,EAlBH,KAkBkBC,EAlBlB,OAuBoCtI,mBAASkI,EAAa9G,WAvB1D,mBAuBG8E,EAvBH,KAuBiBC,EAvBjB,OAwB0CnG,mBAAS,IAxBnD,mBAwBG4E,EAxBH,KAwBoBC,EAxBpB,OA2B4B7E,oBAAS,GA3BrC,mBA2BG8E,EA3BH,KA2BaC,EA3Bb,OA4BwC/E,oBAAS,GA5BjD,mBA4BGsG,EA5BH,KA4BmBC,EA5BnB,KA8BEC,EAAchC,iBAAO,MACrBiC,EAAcjC,iBAAO,MACrBD,EAAcC,iBAAO,MAC3BQ,qBAAU,WACR,IAAMC,EAAc,SAAC3C,GAEdkE,EAAYtB,QAAQC,SAAS7C,EAAEoB,UAC9BoB,GACFC,GAAaD,GAEXwB,GACFC,GAAmBD,KAOzB,OAFAlB,SAASC,iBAAiB,YAAaJ,GAEhC,WACLG,SAASE,oBAAoB,YAAaL,MAE3C,CAACH,EAAUwB,IAId,IAwCsB7E,EAxChB0F,EAAmB,SAAC1B,GACxByB,MAAMzB,EAAOhE,IAAM8D,IAAiBY,EAAgBV,EAAOhE,IAC3DsD,GAAY,IAQRzB,EAAe,WAKnB,IAAMb,EAAU,eAAQyF,GACxBzF,EAAWhB,GAAKyG,EAAazG,GAC7BgB,EAAWnB,MAAQ4B,EACnBT,EAAWlB,YAAcyE,EACzBvD,EAAWjB,SACS,OAAlB6G,EAAyB,KAzEd,SAAC1B,GACd,IAAIC,EAASD,EAAEE,oBAAsB,GAMrC,OALID,EAAS,IACXA,GAA2B,EAATA,GAEpBD,EAAEG,SAASF,GACPD,EAAEI,cAAcC,MAAM,KAAK,GAmEGN,CAAS2B,GAC3C5F,EAAWrB,UAAY8E,EACvBnG,EAAgB0C,GAChB3C,EAAgB2C,GAGhBU,EAAa,IAEbgF,KAMI5C,EAAe,WAInBlB,EAHkB,CAChBxC,KAAM+C,KAgBV,OACE,qBAAKpF,UAAU,UAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,QAAf,UACE,cAACuC,EAAA,EAAD,CAAMvC,UAAU,cAAcwC,QAAS,kBAP7CnC,EAAaqI,EAAazG,SAC1B2G,OAOM,cAACrG,EAAA,EAAD,CAAMvC,UAAU,aAAawC,QAAS,kBAZ5CsB,SACA6E,UAaI,uBACA,+BACE,uBACE5E,KAAK,OACLC,YAAY,aACZC,MAAOP,EACPb,SAAU,SAACC,GAAD,OAAOa,EAAab,EAAEoB,OAAOD,YAG3C,uBACA,+BACE,qBAAKjE,UAAU,kBAAf,SACE,0BACE+D,KAAK,OACLC,YAAY,8BACZC,MAAOuC,EACP3D,SAAU,SAACC,GAAD,OAAO2D,EAAc3D,EAAEoB,OAAOD,cAI9C,uBACA,sBAAKjE,UAAU,0BAA0BgG,IAAKgB,EAA9C,UACE,sBAAKhH,UAAU,mBAAf,UACE,cAACuC,EAAA,EAAD,CACEvC,UAAU,oBACVwC,QAAS,kBA/EfsE,GACFC,GAAmBD,QAErBvB,GAAaD,MA8EY,MAAhBoB,EACG,sBA/CQzE,EAgDKyE,EA/CF,IAAnBtG,EAAQ8B,OAAqB,KAC1B9B,EAAQA,EAAQiB,KAAI,SAACc,GAAD,OAAUA,EAAKF,MAAIG,QAAQH,IAAKI,SAiDrD,uBACA,qBAAKrC,UAAU,UAAf,SACE,qBACEgG,IAAKjB,EACL/E,UAAS,eAAUsF,EAAW,SAAW,YAF3C,SAIE,+BACE,+BACE,8CACA,sBAAKtF,UAAU,wBAAf,UACE,sBAAM4D,SAAUE,EAAhB,SACE,uBACEC,KAAK,OACLC,YAAY,eACZC,MAAOmB,EACPvC,SAAU,SAACC,GAAD,OAAOuC,EAAmBvC,EAAEoB,OAAOD,YAGjD,cAAC1B,EAAA,EAAD,CACEvC,UAAU,oBACVwC,QAAS,kBAAMmF,aAIrB,8BACGvH,EAAQiB,KAAI,SAAC4E,GAAD,OACX,6BACE,wBACEjG,UAAU,cACVwC,QAAS,kBAAMmF,EAAiB1B,IAFlC,SAIGA,EAAO5D,QALH4D,EAAOhE,gBAa1B,uBAEA,sBAAKjC,UAAU,qBAAf,UACE,cAACuC,EAAA,EAAD,CACEvC,UAAU,iBACVwC,QAAS,kBAAMuE,GAAmBD,MAEjB,OAAlB+B,GAAoD,OAA1BH,EAAa1G,SACpC,mBACkB,OAAlB6G,GAAoD,OAA1BH,EAAa1G,SACvC,IAAIjB,KAAK2H,EAAa1G,UAAU4F,eAChCiB,EAAcjB,kBAGpB,qBAAK5H,UAAU,qBAAf,SACE,qBACEgG,IAAKiB,EACLjH,UAAS,eAAU8G,EAAiB,SAAW,YAFjD,SAIE,cAAC,IAAD,CACE7C,MAAO4E,EACPhB,OAAQ,QACRhF,SAAUiG,iBChKXC,EAzDM,SAAC,GAMf,IAKiB9G,EAVtB7B,EAKI,EALJA,QACAsI,EAII,EAJJA,aACAC,EAGI,EAHJA,WACAtI,EAEI,EAFJA,aACAuI,EACI,EADJA,SAUA,OACE,qBAAK5I,UAAU,UAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,QAAf,UACE,cAACuC,EAAA,EAAD,CAAMvC,UAAU,cAAcwC,QAAS,kBAX7CnC,EAAaqI,EAAazG,SAC1B2G,OAWM,cAACrG,EAAA,EAAD,CAAMvC,UAAU,aAAawC,QAAS,kBAAMmG,UAE9C,uBACA,qBAAK3I,UAAU,aAAf,SACE,6BAAK0I,EAAa5G,UAEpB,uBACA,qBAAK9B,UAAU,mBAAf,SAAmC0I,EAAa3G,cAChD,uBACA,qBAAK/B,UAAU,gBAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,cAACuC,EAAA,EAAD,CAAMvC,UAAU,sBAEhB,qBAAKA,UAAU,cAAf,SAC8B,OAA3B0I,EAAa9G,UACV,sBAxBMK,EAyBOyG,EAAa9G,UAxBjB,IAAnBxB,EAAQ8B,OAAqB,KAC1B9B,EAAQA,EAAQiB,KAAI,SAACc,GAAD,OAAUA,EAAKF,MAAIG,QAAQH,IAAKI,aA2BvD,uBACA,qBAAKrC,UAAU,gBAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,cAACuC,EAAA,EAAD,CAAMvC,UAAU,mBAChB,sBAAKA,UAAU,gBAAf,UACG,IAC0B,OAA1B0I,EAAa1G,SACV,mBACA,IAAIjB,KAAK2H,EAAa1G,UAAU4F,6BCCnCoB,EA/CE,SAAC,GAOX,IANL5I,EAMI,EANJA,QACAsI,EAKI,EALJA,aACAnI,EAII,EAJJA,gBACAD,EAGI,EAHJA,gBACAuE,EAEI,EAFJA,kBACAxE,EACI,EADJA,aAEMK,EAAUC,cACViI,EAAW,WACflI,EAAQ2C,KAAK,MAHX,EAK4B7C,oBAAS,GALrC,mBAKGyI,EALH,KAKaC,EALb,KAMEP,EAAa,WACjBO,GAAaD,IAGf,OAAQP,EAEJO,EACF,sBAAKjJ,UAAU,UAAf,UACE,uBACA,cAAC,EAAD,CACEI,QAASA,EACTsI,aAAcA,EACdnI,gBAAiBA,EACjBD,gBAAiBA,EACjBuE,kBAAmBA,EACnB8D,WAAYA,EACZtI,aAAcA,EACduI,SAAUA,OAId,sBAAK5I,UAAU,UAAf,UACE,uBACA,cAAC,EAAD,CACEI,QAASA,EACTsI,aAAcA,EACdC,WAAYA,EACZtI,aAAcA,EACduI,SAAUA,OAvBd,yCAAIA,QCmNOO,EA1NH,WAEV,IAAIxJ,EAAM,GAFM,EAGkBa,mBAAS,IAH3B,mBAGT4I,EAHS,KAGEC,EAHF,OAI0B7I,oBAAS,GAJnC,mBAIT4D,EAJS,KAIME,EAJN,OAKgB9D,mBAAS,eALzB,mBAKT+D,EALS,KAKC+E,EALD,KAUX3J,EAAM,uDAVK,MAYUa,mBAAS,IAZnB,mBAYTL,EAZS,KAYFmG,EAZE,OAac9F,mBAAS,IAbvB,mBAaTJ,EAbS,KAaAmJ,EAbA,OAcwB/I,mBAAS,MAdjC,mBAcTkI,EAdS,KAcKnI,EAdL,KAgBhBiF,qBAAU,WACRgE,MAEC,CAACJ,IAEJ,IAAM3F,EAAU,uCAAG,WAAOgG,GAAP,SAAAC,EAAA,sDAEFL,EAAP,OAARI,EAA4B,GAAmB,WAAD,OAAYA,IAFzC,2CAAH,sDAMVE,EAAY,SAACC,EAAOC,GACxB,IAAIC,EAAG,YAAOF,GAERG,EAAW,SAACL,EAAGM,GACnB,OAAIN,EAAEG,GAASG,EAAEH,GACR,EACEH,EAAEG,GAASG,EAAEH,IAEA,OAAbH,EAAEG,IADH,EAID,GAOX,OAJAzF,EACI0F,EAAIG,MAAK,SAACP,EAAGM,GAAJ,OAAUD,EAASL,EAAGM,MAC/BF,EAAIG,MAAK,SAACD,EAAGN,GAAJ,OAAUK,EAASL,EAAGM,MAE5BF,GAIHzF,EAAmB,SAACwF,GACpBA,IAAUtF,GACZ+E,EAAYO,GAEdvD,EAASqD,EAAUxJ,EAAO0J,KAGtBL,EAAY,WAChB,IAAMU,EAAU,uCAAG,WAAOL,GAAP,6BAAAH,EAAA,6DAAcS,EAAd,+BAAsB,GAAtB,SACMC,IAAMC,IAAI1K,EAAM,IAAMkK,EAAQM,GADpC,cACXG,EADW,yBAGVA,EAASC,MAHC,2CAAH,sDAMhBC,QAAQC,IAAI,CAACP,EAAW,QAASd,GAAYc,EAAW,aACrDQ,MAAK,SAACH,GACL,IAAMzJ,EAAO6I,EAAUY,EAAK,GAAIhG,GAChC+B,EAASxF,GACTyI,EAAWgB,EAAK,OAEjBI,OAAM,SAAC7H,GAAD,OAAO8H,QAAQC,IAAI/H,OAGxBxC,EAAe,uCAAG,WAAO0C,GAAP,SAAA0G,EAAA,uEAEJtG,IAAZJ,EAAKf,GAFW,gCAGZmI,IAAMU,KAAKnL,EAAG,iBAAaqD,EAAKf,IAAhC,eACDe,IAJa,6CAOZoH,IAAMU,KAAKnL,EAAM,SAAjB,eACDqD,IARa,OAWpBwG,IAXoB,kDAapBoB,QAAQC,IAAR,MAboB,0DAAH,sDAgBfhG,EAAiB,uCAAG,WAAOoB,GAAP,SAAAyD,EAAA,+EAEhBU,IAAMU,KAAKnL,EAAG,WAAd,eAAkCsG,IAFlB,OAGtBuD,IAHsB,+CAKtBoB,QAAQC,IAAR,MALsB,wDAAH,sDASjBxK,EAAY,uCAAG,WAAO4B,GAAP,eAAAyH,EAAA,sEACDU,IAAMW,OAAOpL,EAAM,UAAYsC,GAD9B,OAGA,OAFb+I,EADa,QAGXC,SACNL,QAAQC,IAAI,wBACZD,QAAQC,IAAIG,IAEdxB,IAPmB,2CAAH,sDASZ5E,EAAkB,uCAAG,WAAO3C,GAAP,eAAAyH,EAAA,sEACPU,IAAMW,OAAOpL,EAAM,YAAcsC,GAD1B,OAEN,OADb+I,EADmB,QAEjBC,SACNL,QAAQC,IAAI,wBACZD,QAAQC,IAAIG,IAEdxB,IANyB,2CAAH,sDAQlBrD,EAAc,uCAAG,4BAAAuD,EAAA,sEACHU,IAAMW,OAAOpL,EAAM,WADhB,OAEF,OADbqL,EADe,QAEbC,SACNL,QAAQC,IAAI,wBACZD,QAAQC,IAAIG,IAEdxB,IANqB,2CAAH,qDASdpD,EAAgB,uCAAG,4BAAAsD,EAAA,sEACLU,IAAMW,OAAOpL,EAAM,aADd,OAEJ,OADbqL,EADiB,QAEfC,SACNL,QAAQC,IAAI,wBACZD,QAAQC,IAAIG,IAEdxB,IANuB,2CAAH,qDA3HN,GAmIchJ,mBAAS,OAnIvB,qBAmIT+F,GAnIS,MAmIA2E,GAnIA,MAoIZC,GAAcC,wBAAc,CAAEjB,MAAO,uBACnCkB,GAAW,WACXF,IACFD,GAAW,QASf,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAQzH,WAAYA,IACpB,cAAC,EAAD,CACE8C,QAASA,GACTwB,oBAXsB,WAEtBmD,GADJC,GAC2B,SAAZ5E,GAAqB,KAAO,OAChB,UAAZA,GAAsB,MAAQ,UASzCyB,SAAUqD,KAEZ,cAAC,EAAD,CAAQ9E,QAASA,GAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4B,OAAK,EAACmD,KAAK,IAAlB,SACE,cAAC,EAAD,CACEnL,MAAOA,EACPC,QAASA,EACTC,aAAcA,EACd2H,SAAUqD,GACV9E,QAASA,GACTjG,gBAAiBA,EACjBC,gBAAiBA,EACjB8D,iBAAkBA,EAClBZ,WAAYA,EACZW,cAAeA,EACfE,iBAAkBA,EAClBC,SAAUA,MAId,cAAC,IAAD,CAAO4D,OAAK,EAACmD,KAAK,WAAlB,SACE,cAAC,EAAD,CACEnL,MAAOA,EACPC,QAASA,EACTC,aAAcA,EACd2H,SAAUqD,GACV9E,QAASA,GACTjG,gBAAiBA,EACjBC,gBAAiBA,EACjB8D,iBAAkBA,EAClBO,mBAAoBA,EACpBC,kBAAmBA,MAGvB,cAAC,IAAD,CAAOsD,OAAK,EAACmD,KAAK,YAAlB,SACE,cAAC,EAAD,CACEnF,eAAgBA,EAChBC,iBAAkBA,MAGtB,cAAC,IAAD,CAAO+B,OAAK,EAACmD,KAAK,OAAlB,SACE,cAAC,EAAD,CACEnL,MAAOA,EACPC,QAASA,EACTkG,SAAUA,EACVC,QAASA,GACTjG,gBAAiBA,EACjBuE,kBAAmBA,MAGvB,cAAC,IAAD,CAAOsD,OAAK,EAACmD,KAAK,QAAlB,SACE,cAAC,EAAD,CACElL,QAASA,EACTsI,aAAcA,EACdnI,gBAAiBA,EACjBD,gBAAiBA,EACjBuE,kBAAmBA,EACnB1E,MAAOA,EACPE,aAAcA,eC5N5BkL,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7F,SAAS8F,eAAe,W","file":"static/js/main.d7e2d19c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst TitleComponent = () => {\r\n  const url = useLocation();\r\n\r\n  const getTitle = () => {\r\n    switch (url.pathname) {\r\n      case \"/\":\r\n        return \"Tasks\";\r\n      case \"/folders\":\r\n        return \"Folders\";\r\n      case \"/settings\":\r\n        return \"Settings\";\r\n      case \"/add\":\r\n        return \"New task\";\r\n      case \"/task\":\r\n        return \"Task\";\r\n      default:\r\n        return \"Something went wrong :>\";\r\n    }\r\n  };\r\n\r\n  return <h1>{getTitle()}</h1>;\r\n};\r\n\r\nexport default TitleComponent;\r\n","import React from \"react\";\r\nimport TitleComponent from \"./TitleComponent\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <TitleComponent />\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { Checkbox, Icon } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst TodoList = ({\r\n  selectedFolder,\r\n  todos,\r\n  folders,\r\n  handleDelete,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n}) => {\r\n  // numbers represents indexes of todo tasks\r\n  const [itemsToPrint, setItemsToPrint] = useState([3, 1, 5]);\r\n  let history = useHistory();\r\n  let wrapperFunction = (todo) => {\r\n    setSelectedTask(todo);\r\n\r\n    history.push(\"/task\");\r\n  };\r\n  // pass value here to print spesific folder\r\n  const checkIfPrint = (id) => {\r\n    return selectedFolder === null || selectedFolder === undefined\r\n      ? true\r\n      : selectedFolder.id === id\r\n      ? true\r\n      : false;\r\n  };\r\n  const handleChange = (event, task) => {\r\n    // post check\r\n    const editedTask = { ...task };\r\n    editedTask.isDone = !editedTask.isDone;\r\n    postTaskHandler(editedTask);\r\n\r\n    //setChecked(event.target.checked);\r\n  };\r\n\r\n  // Function to convert the sql-date to preferred string with prefixed zeros\r\n  let sqlDateToDateString = (d) => {\r\n    if (d !== null) {\r\n      let temp = new Date(d);\r\n      let dateFormat = `${(\"0\" + temp.getDate()).slice(-2)}.${(\r\n        \"0\" +\r\n        (temp.getMonth() + 1)\r\n      ).slice(-2)}.`;\r\n      return dateFormat;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  // prints sql table names as titles\r\n  const printTitles = () => {\r\n    let arr;\r\n    todos[0] !== undefined ? (arr = [...Object.keys(todos[0])]) : (arr = null);\r\n    if (arr) {\r\n      return (\r\n        <ul>\r\n          {itemsToPrint.map((index) => {\r\n            switch (index) {\r\n              case 1:\r\n                return <li> Title</li>;\r\n              case 2:\r\n                return <li> Description</li>;\r\n              case 3:\r\n                return <li> Status</li>;\r\n              case 4:\r\n                return <li> Creation time</li>;\r\n              case 5:\r\n                return <li> Deadline</li>;\r\n              case 6:\r\n                return <li> Folder</li>;\r\n              default:\r\n                return <li>{arr[index]}</li>;\r\n            }\r\n          })}\r\n        </ul>\r\n      );\r\n    }\r\n    return <li>Missing titles</li>;\r\n  };\r\n\r\n  const printTodos = () => {\r\n    const renderColumns = (todo) => {\r\n      return (\r\n        <>\r\n          {itemsToPrint.map((index) => {\r\n            switch (index) {\r\n              case 1:\r\n                return <div>{renderTitle(todo)}</div>;\r\n              case 2:\r\n                return <div> {renderDescription(todo)}</div>;\r\n              //case 3:\r\n              //  return <div>{renderIsDone(todo)}</div>;\r\n              case 4:\r\n                return <div> {todo.timeCreated}</div>; // should not be used outside testing\r\n              case 5:\r\n                return <div>{renderDeadLine(todo)}</div>;\r\n\r\n              case 6:\r\n                return <div> {renderFolder(todo.folder_id)}</div>;\r\n              default:\r\n                return <> </>;\r\n            }\r\n          })}\r\n        </>\r\n      );\r\n    };\r\n    const renderTitle = (todo) => {\r\n      return (\r\n        <div className={todo.isDone ? \"task-done\" : \"task\"}>{todo.title}</div>\r\n      );\r\n    };\r\n    const renderDescription = (todo) => {\r\n      return <>{todo.description} </>;\r\n    };\r\n    const renderDeadLine = (todo) => {\r\n      return (\r\n        <div className=\"dead-line\"> {sqlDateToDateString(todo.deadline)} </div>\r\n      );\r\n    };\r\n\r\n    const renderFolder = (id) => {\r\n      if (folders.length === 0 || id === null) return null;\r\n      return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n    };\r\n    const renderDeleteButton = (todo) => {\r\n      return (\r\n        <>\r\n          <Icon className=\"fa fa-trash\" onClick={() => handleDelete(todo.id)} />\r\n        </>\r\n      );\r\n    };\r\n    const renderIsDone = (todo) => {\r\n      return (\r\n        <>\r\n          <Checkbox\r\n            className=\"check-box\"\r\n            checked={Boolean(todo.isDone)}\r\n            onChange={(e) => handleChange(e, todo)}\r\n            inputProps={{ \"aria-label\": \"checkbox with default color\" }}\r\n          />\r\n        </>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        {todos.map(\r\n          (todo) =>\r\n            checkIfPrint(todo.folder_id) && (\r\n              <>\r\n                <hr />\r\n                <div className=\"todo-item\" key={todo.id}>\r\n                  <div>{renderIsDone(todo)} </div>\r\n                  <div\r\n                    className=\"clickable-area\"\r\n                    onClick={() => wrapperFunction(todo)}\r\n                  >\r\n                    {renderColumns(todo)}\r\n                  </div>\r\n                  <div>{renderDeleteButton(todo)}</div>\r\n                </div>\r\n              </>\r\n            )\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return <div className=\"todos\"> {printTodos()}</div>;\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from \"react\";\r\n\r\nconst SearchBar = ({ searchData }) => {\r\n  const [currInput, setCurrInput] = useState(\"\");\r\n\r\n  const renderSearchBar = () => {\r\n    const handleSubmit = (e) => {\r\n      // prevent reload?\r\n      e.preventDefault();\r\n      if (currInput.length > 0) {\r\n        searchData(currInput);\r\n        setCurrInput(\"\");\r\n      } else {\r\n        // null means fetchAll\r\n        searchData(null);\r\n      }\r\n    };\r\n    return (\r\n      <form onSubmit={(e) => handleSubmit(e)}>\r\n        <div className=\"search-button\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            value={currInput}\r\n            onChange={(e) => setCurrInput(e.target.value)}\r\n          />\r\n        </div>\r\n      </form>\r\n    );\r\n  };\r\n  return <div className=\"search-bar\">{renderSearchBar()}</div>;\r\n};\r\nexport default SearchBar;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst Sort = ({\r\n  sortAscending,\r\n  sortTodosHandler,\r\n  setSortAscending,\r\n  currSort,\r\n}) => {\r\n  const printPrettierSelectedSort = (currSort) => {\r\n    switch (currSort) {\r\n      case \"title\":\r\n        return \"Title\";\r\n      case \"timeCreated\":\r\n        return \"Time created\";\r\n      case \"isDone\":\r\n        return \"Status\";\r\n      case \"deadline\":\r\n        return \"Deadline\";\r\n      default:\r\n        return \"Error!\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sort\">\r\n      Sort\r\n      <div className=\"dropdown\">\r\n        <button className=\"dropbtn\">\r\n          {printPrettierSelectedSort(currSort)}\r\n        </button>\r\n        <div className=\"dropdown-content\">\r\n          <button onClick={() => sortTodosHandler(\"title\")}>Title</button>\r\n          <button onClick={() => sortTodosHandler(\"timeCreated\")}>\r\n            Time created\r\n          </button>\r\n          <button onClick={() => sortTodosHandler(\"deadline\")}>Deadline</button>\r\n          <button onClick={() => sortTodosHandler(\"isDone\")}>Status</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"arrow\">\r\n        <Icon\r\n          className={sortAscending ? \"fa fa-arrow-up\" : \"fa fa-arrow-down\"}\r\n          onClick={() => {\r\n            setSortAscending(!sortAscending);\r\n            sortTodosHandler(currSort);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Sort from \"./Sort\";\r\n\r\nconst Home = ({\r\n  todos,\r\n  folders,\r\n  handleDelete,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n  sortTodosHandler,\r\n  searchData,\r\n  sortAscending,\r\n  setSortAscending,\r\n  currSort,\r\n}) => {\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"sort-and-search\">\r\n        <Sort\r\n          sortAscending={sortAscending}\r\n          sortTodosHandler={sortTodosHandler}\r\n          setSortAscending={setSortAscending}\r\n          currSort={currSort}\r\n        />\r\n        <SearchBar searchData={searchData} />\r\n      </div>\r\n\r\n      <TodoList\r\n        selectFolder={null}\r\n        todos={todos}\r\n        folders={folders}\r\n        handleDelete={handleDelete}\r\n        postTaskHandler={postTaskHandler}\r\n        setSelectedTask={setSelectedTask}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst Folders = ({\r\n  todos,\r\n  folders,\r\n  handleDelete,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n  sortTodosHandler,\r\n  handleFolderDelete,\r\n  postFolderHandler,\r\n}) => {\r\n  const [selectedFolder, setSelectedFolder] = useState(null);\r\n  //dropdown\r\n  const dropdownRef = useRef(null);\r\n  const [folderListActive, setFolderListActive] = useState(false);\r\n  // handle outside clicks\r\n  const closeFolderList = useRef();\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolderList.current.contains(e.target)) {\r\n        if (folderListActive) {\r\n          setFolderListActive(!folderListActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [folderListActive]);\r\n  const addFolderWrapper = (folder) => {\r\n    submitFolder();\r\n    setIsActive(!isActive);\r\n  };\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"dropdown-menu-container\" ref={closeFolderList}>\r\n        <div className=\"folders-folder-icon\">\r\n          <Icon\r\n            className=\"fa fa-folder-open\"\r\n            onClick={() => setFolderListActive(!folderListActive)}\r\n          />\r\n          {selectedFolder !== null\r\n            ? ` ${selectedFolder.name}`\r\n            : \" No folder selected\"}\r\n        </div>\r\n\r\n        <br />\r\n\r\n        <div className=\"folders\">\r\n          <nav\r\n            ref={dropdownRef}\r\n            className={`menu ${folderListActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <ul>\r\n              <li>\r\n                <p>Create Folder</p>\r\n                <div className=\"folder-title-and-icon\">\r\n                  <form>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Folder title\"\r\n                      value={folderCurrInput}\r\n                      onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                    ></input>\r\n                  </form>\r\n                  <Icon\r\n                    className=\"fa fa-plus-square\"\r\n                    onClick={() => addFolderWrapper()}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <div>\r\n                {folders.map((folder) => (\r\n                  <li key={folder.id}>\r\n                    <div className=\"folders-title-and-icon\">\r\n                      <button\r\n                        className=\"folders-btn\"\r\n                        onClick={() => setSelectedFolder(folder)}\r\n                      >\r\n                        {folder.name}\r\n                      </button>\r\n                      <div className=\"folders-trash\">\r\n                        <Icon\r\n                          className=\"fa fa-trash\"\r\n                          onClick={() => handleFolderDelete(folder.id)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </div>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n      <TodoList\r\n        selectedFolder={selectedFolder}\r\n        todos={todos}\r\n        folders={folders}\r\n        handleDelete={handleDelete}\r\n        postTaskHandler={postTaskHandler}\r\n        setSelectedTask={setSelectedTask}\r\n        sortTodosHandler={sortTodosHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Folders;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\n\r\nconst Settings = ({ deleteAllTasks, deleteAllFolders }) => {\r\n  const wrapper = () => {\r\n    deleteAllTasks();\r\n    deleteAllFolders();\r\n  };\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"settings\">\r\n        <button onClick={() => deleteAllTasks()}>Delete all tasks</button>\r\n\r\n        <button onClick={() => deleteAllFolders()}>Delete all folders</button>\r\n\r\n        <button onClick={() => wrapper()}>Full reset</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst AddTodo = ({\r\n  todos,\r\n  setTodos,\r\n  folders,\r\n  navSize,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n}) => {\r\n  // title\r\n  const [currInput, setCurrInput] = useState(\"\");\r\n  // description\r\n  const [dCurrInput, setDCurrInput] = useState(\"\");\r\n  // folder\r\n  const [taskFolderId, setTaskFolderId] = useState(null);\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n  // for showing currently selected folder\r\n  const [folderNamePrint, setFolderNamePrint] = useState(\"\");\r\n  // calendar\r\n  const [value, onChange] = useState(null);\r\n  // dropdown\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  //calendar dropdown\r\n  const [calendarActive, setCalendarActive] = useState(false);\r\n\r\n  // handle clicks when clicked outside select folder\r\n  const closeFolder = useRef(null);\r\n  const calendarRef = useRef(null);\r\n  const dropdownRef = useRef(null);\r\n\r\n  const folderWrapper = () => {\r\n    if (calendarActive) {\r\n      setCalendarActive(!calendarActive);\r\n    }\r\n    setIsActive(!isActive);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolder.current.contains(e.target)) {\r\n        if (isActive) {\r\n          setIsActive(!isActive);\r\n        }\r\n        if (calendarActive) {\r\n          setCalendarActive(!calendarActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [isActive, calendarActive]);\r\n\r\n  // wrapper function for closing dropdown\r\n  // creating a folder or selecting existing\r\n  const addFolderWrapper = (folder) => {\r\n    isNaN(folder.id) ? submitFolder() : setTaskFolderId(folder.id);\r\n    setFolderNamePrint(folder.name);\r\n    setIsActive(false);\r\n  };\r\n\r\n  // for redirecting\r\n  let history = useHistory();\r\n\r\n  // handle timezone offset for sql-date conversion\r\n  // takes Date.object as an argument\r\n  let tzoffset = (v) => {\r\n    let offSet = v.getTimezoneOffset() / 60;\r\n    if (offSet < 0) {\r\n      offSet = offSet - offSet * 2;\r\n    }\r\n    v.setHours(offSet);\r\n    v = v.toISOString().split(\"T\")[0];\r\n    return v;\r\n  };\r\n\r\n  // function to close dropdownmenu on outside-clicks\r\n\r\n  // here we could send task to sql server and then fetch tasks again\r\n  // currently recreating todos state\r\n  const handleSubmit = (e) => {\r\n    // prevent reload?\r\n    e.preventDefault();\r\n\r\n    // create new task and post it\r\n    const newTodo = {\r\n      title: currInput,\r\n      description: dCurrInput, // add logic here\r\n      deadline: value === null ? null : tzoffset(value),\r\n      folder_id: taskFolderId,\r\n    };\r\n    postTaskHandler(newTodo);\r\n\r\n    // set input to empty when submitting -is this needed? works without\r\n    setCurrInput(\"\");\r\n    //setDCurrInput(\"\");\r\n\r\n    // redirect to homepage after submit\r\n    history.push(\"/\");\r\n  };\r\n\r\n  // handles folder creation & post\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"add-todo\">\r\n        <Icon className=\"fa fa-check-circle\" onClick={handleSubmit} />\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Task title\"\r\n            value={currInput}\r\n            onChange={(e) => setCurrInput(e.target.value)}\r\n          />\r\n        </form>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"description-box\">\r\n            <textarea\r\n              type=\"text\"\r\n              placeholder=\"Task description (optional)\"\r\n              value={dCurrInput}\r\n              onChange={(e) => setDCurrInput(e.target.value)}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"dropdown-menu-container\" ref={closeFolder}>\r\n        <hr />\r\n        <div className=\"addtodo-folder-icon\">\r\n          <Icon className=\"fa fa-folder-open\" onClick={() => folderWrapper()} />\r\n          {folderNamePrint == \"\" ? \"No folder selected\" : folderNamePrint}\r\n        </div>\r\n        <div className=\"folders\">\r\n          <nav\r\n            ref={dropdownRef}\r\n            className={`menu ${isActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <ul>\r\n              <li>\r\n                <p>Create folder</p>{\" \"}\r\n                <div className=\"folder-title-and-icon\">\r\n                  <form onSubmit={handleSubmit}>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Folder title\"\r\n                      value={folderCurrInput}\r\n                      onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                    ></input>\r\n                  </form>\r\n                  <Icon\r\n                    className=\"fa fa-plus-square\"\r\n                    onClick={() => submitFolder()}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <div>\r\n                {folders.map((folder) => (\r\n                  <li key={folder.id}>\r\n                    <button\r\n                      className=\"folders-btn\"\r\n                      onClick={() => addFolderWrapper(folder)}\r\n                    >\r\n                      {folder.name}\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </div>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        <hr />\r\n        <div className=\"date-selection-show\">\r\n          <div className=\"addtodo-calendar-icon\">\r\n            <Icon\r\n              className=\"fa fa-calendar\"\r\n              onClick={() => setCalendarActive(!calendarActive)}\r\n            />\r\n            {value === null ? \"No date selected\" : value.toDateString()}\r\n          </div>\r\n        </div>\r\n        <div className=\"calendar-container\">\r\n          <nav\r\n            ref={calendarRef}\r\n            className={`menu ${calendarActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <Calendar value={null} locale={\"en-EN\"} onChange={onChange} />\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\"; // import { Link } from \"react-router-dom\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst LeftNav = ({ navSize, handleNavSizeChange, closeNav }) => {\r\n  let history = useHistory();\r\n  let wrapperFunction = () => {\r\n    closeNav();\r\n    history.push(\"/add\");\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"left-sidebar\" style={{ width: navSize }}>\r\n        <nav className=\"navbar\">\r\n          <NavLink\r\n            exact\r\n            to={\"/\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon className=\"fa fa-home\" />\r\n            Tasks\r\n          </NavLink>\r\n          <NavLink\r\n            to={\"/folders\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon className=\"fa fa-folder-open\" />\r\n            Folders\r\n          </NavLink>\r\n          <NavLink\r\n            to={\"/settings\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon className=\"fa fa-cog\" />\r\n            Settings\r\n          </NavLink>\r\n        </nav>\r\n      </div>\r\n      <div className=\"burger-btn\">\r\n        <Icon className=\"fa fa-bars\" onClick={() => handleNavSizeChange()} />\r\n      </div>\r\n      <div className=\"add-btn\">\r\n        <Icon className=\"fa fa-plus-square\" onClick={() => wrapperFunction()} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftNav;\r\n","import React from \"react\";\r\n\r\nconst Layout = (props) => (\r\n  <div className={props.navSize === \"100%\" ? \"blur\" : \"\"}>{props.children}</div>\r\n);\r\n\r\nexport default Layout;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst TaskViewEdit = ({\r\n  folders,\r\n  selectedTask,\r\n  setSelectedTask,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n  toggleMode,\r\n  handleDelete,\r\n  redirect,\r\n}) => {\r\n  // date conversion to sql\r\n  let tzoffset = (v) => {\r\n    let offSet = v.getTimezoneOffset() / 60;\r\n    if (offSet < 0) {\r\n      offSet = offSet - offSet * 2;\r\n    }\r\n    v.setHours(offSet);\r\n    v = v.toISOString().split(\"T\")[0];\r\n    return v;\r\n  };\r\n  // title\r\n  const [currInput, setCurrInput] = useState(selectedTask.title);\r\n\r\n  // description\r\n  const [dCurrInput, setDCurrInput] = useState(selectedTask.description);\r\n\r\n  // calendar\r\n  const [calendarValue, setCalendarValue] = useState(\r\n    selectedTask.deadline === null ? null : new Date(selectedTask.deadline)\r\n  );\r\n\r\n  //folder\r\n  const [taskFolderId, setTaskFolderId] = useState(selectedTask.folder_id);\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n  // dropdown\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [calendarActive, setCalendarActive] = useState(false);\r\n  // handle clicks when clicked outside select folder\r\n  const closeFolder = useRef(null);\r\n  const calendarRef = useRef(null);\r\n  const dropdownRef = useRef(null);\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolder.current.contains(e.target)) {\r\n        if (isActive) {\r\n          setIsActive(!isActive);\r\n        }\r\n        if (calendarActive) {\r\n          setCalendarActive(!calendarActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [isActive, calendarActive]);\r\n\r\n  // wrapper function for closing dropdown\r\n  // creating a folder or selecting existing\r\n  const addFolderWrapper = (folder) => {\r\n    isNaN(folder.id) ? submitFolder() : setTaskFolderId(folder.id);\r\n    setIsActive(false);\r\n  };\r\n  const folderWrapper = () => {\r\n    if (calendarActive) {\r\n      setCalendarActive(!calendarActive);\r\n    }\r\n    setIsActive(!isActive);\r\n  };\r\n  const handleSubmit = () => {\r\n    // prevent reload?\r\n    //e.preventDefault();\r\n\r\n    // edit task and post it\r\n    const editedTask = { ...selectedTask };\r\n    editedTask.id = selectedTask.id;\r\n    editedTask.title = currInput;\r\n    editedTask.description = dCurrInput;\r\n    editedTask.deadline =\r\n      calendarValue === null ? null : tzoffset(calendarValue);\r\n    editedTask.folder_id = taskFolderId;\r\n    setSelectedTask(editedTask);\r\n    postTaskHandler(editedTask);\r\n\r\n    // set input to empty when submitting -is this needed? works without\r\n    setCurrInput(\"\");\r\n    //setDCurrInput(\"\");\r\n    toggleMode();\r\n    // redirect to homepage after submit\r\n    // history.push(\"/\");\r\n  };\r\n\r\n  // handles folder creation & post\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  const renderFolder = (id) => {\r\n    if (folders.length === 0) return null;\r\n    return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n  };\r\n  const wrapper = () => {\r\n    handleSubmit();\r\n    toggleMode();\r\n  };\r\n  const deleteWrapper = () => {\r\n    handleDelete(selectedTask.id);\r\n    redirect();\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"edit-container\">\r\n        <div className=\"icons\">\r\n          <Icon className=\"fa fa-trash\" onClick={() => deleteWrapper()} />\r\n          <Icon className=\"fa fa-save\" onClick={() => wrapper()} />\r\n        </div>\r\n        <hr />\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Task title\"\r\n            value={currInput}\r\n            onChange={(e) => setCurrInput(e.target.value)}\r\n          />\r\n        </form>\r\n        <hr />\r\n        <form>\r\n          <div className=\"description-box\">\r\n            <textarea\r\n              type=\"text\"\r\n              placeholder=\"Task description (optional)\"\r\n              value={dCurrInput}\r\n              onChange={(e) => setDCurrInput(e.target.value)}\r\n            />\r\n          </div>\r\n        </form>\r\n        <br />\r\n        <div className=\"dropdown-menu-container\" ref={closeFolder}>\r\n          <div className=\"edit-folder-icon\">\r\n            <Icon\r\n              className=\"fa fa-folder-open\"\r\n              onClick={() => folderWrapper()}\r\n            />\r\n            {taskFolderId == null\r\n              ? \"No folder selected\"\r\n              : renderFolder(taskFolderId)}\r\n          </div>\r\n\r\n          <br />\r\n          <div className=\"folders\">\r\n            <nav\r\n              ref={dropdownRef}\r\n              className={`menu ${isActive ? \"active\" : \"inactive\"}`}\r\n            >\r\n              <ul>\r\n                <li>\r\n                  <p>Create folder</p>\r\n                  <div className=\"folder-title-and-icon\">\r\n                    <form onSubmit={handleSubmit}>\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Folder title\"\r\n                        value={folderCurrInput}\r\n                        onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                      ></input>\r\n                    </form>\r\n                    <Icon\r\n                      className=\"fa fa-plus-square\"\r\n                      onClick={() => addFolderWrapper()}\r\n                    />\r\n                  </div>\r\n                </li>\r\n                <div>\r\n                  {folders.map((folder) => (\r\n                    <li key={folder.id}>\r\n                      <button\r\n                        className=\"folders-btn\"\r\n                        onClick={() => addFolderWrapper(folder)}\r\n                      >\r\n                        {folder.name}\r\n                      </button>\r\n                    </li>\r\n                  ))}\r\n                </div>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n          <hr />\r\n\r\n          <div className=\"edit-calendar-icon\">\r\n            <Icon\r\n              className=\"fa fa-calendar\"\r\n              onClick={() => setCalendarActive(!calendarActive)}\r\n            />\r\n            {calendarValue === null && selectedTask.deadline === null\r\n              ? \"No date selected\"\r\n              : calendarValue === null && selectedTask.deadline !== null\r\n              ? new Date(selectedTask.deadline).toDateString()\r\n              : calendarValue.toDateString()}\r\n          </div>\r\n\r\n          <div className=\"calendar-container\">\r\n            <nav\r\n              ref={calendarRef}\r\n              className={`menu ${calendarActive ? \"active\" : \"inactive\"}`}\r\n            >\r\n              <Calendar\r\n                value={calendarValue}\r\n                locale={\"en-EN\"}\r\n                onChange={setCalendarValue}\r\n              />\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskViewEdit;\r\n","import React, { useState } from \"react\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst TaskViewShow = ({\r\n  folders,\r\n  selectedTask,\r\n  toggleMode,\r\n  handleDelete,\r\n  redirect,\r\n}) => {\r\n  const deleteWrapper = () => {\r\n    handleDelete(selectedTask.id);\r\n    redirect();\r\n  };\r\n  const renderFolder = (id) => {\r\n    if (folders.length === 0) return null;\r\n    return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"show-container\">\r\n        <div className=\"icons\">\r\n          <Icon className=\"fa fa-trash\" onClick={() => deleteWrapper()} />\r\n          <Icon className=\"fa fa-edit\" onClick={() => toggleMode()} />\r\n        </div>\r\n        <hr />\r\n        <div className=\"show-title\">\r\n          <h2>{selectedTask.title}</h2>\r\n        </div>\r\n        <hr />\r\n        <div className=\"show-description\">{selectedTask.description}</div>\r\n        <hr />\r\n        <div className=\"icon-and-name\">\r\n          <div className=\"show-folder-icon\">\r\n            <Icon className=\"fa fa-folder-open\" />\r\n\r\n            <div className=\"show-folder\">\r\n              {selectedTask.folder_id === null\r\n                ? \"No folder selected\"\r\n                : renderFolder(selectedTask.folder_id)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"icon-and-name\">\r\n          <div className=\"show-calendar-icon\">\r\n            <Icon className=\"fa fa-calendar\" />\r\n            <div className=\"show-deadline\">\r\n              {\" \"}\r\n              {selectedTask.deadline === null\r\n                ? \"No date selected\"\r\n                : new Date(selectedTask.deadline).toDateString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskViewShow;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TaskViewEdit from \"./TaskViewEdit\";\r\nimport TaskViewShow from \"./TaskViewShow\";\r\n\r\nconst TaskView = ({\r\n  folders,\r\n  selectedTask,\r\n  setSelectedTask,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n  handleDelete,\r\n}) => {\r\n  const history = useHistory();\r\n  const redirect = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const [editMode, setEditMode] = useState(false);\r\n  const toggleMode = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n  return !selectedTask ? (\r\n    <> {redirect()}</>\r\n  ) : editMode ? (\r\n    <div className=\"content\">\r\n      <br />\r\n      <TaskViewEdit\r\n        folders={folders}\r\n        selectedTask={selectedTask}\r\n        setSelectedTask={setSelectedTask}\r\n        postTaskHandler={postTaskHandler}\r\n        postFolderHandler={postFolderHandler}\r\n        toggleMode={toggleMode}\r\n        handleDelete={handleDelete}\r\n        redirect={redirect}\r\n      />\r\n    </div>\r\n  ) : (\r\n    <div className=\"content\">\r\n      <br />\r\n      <TaskViewShow\r\n        folders={folders}\r\n        selectedTask={selectedTask}\r\n        toggleMode={toggleMode}\r\n        handleDelete={handleDelete}\r\n        redirect={redirect}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskView;\r\n","import \"./App.scss\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport axios from \"axios\";\r\n\r\n// local components\r\nimport Header from \"./components/Header\";\r\nimport Home from \"./components/Home\";\r\nimport Folders from \"./components/Folders\";\r\nimport Settings from \"./components/Settings\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport LeftNav from \"./components/LeftNav\";\r\nimport Layout from \"./components/Layout\";\r\nimport TaskView from \"./components/TaskView\";\r\n\r\nconst App = () => {\r\n  // simulates tasklist fetched from backend\r\n  let url = \"\";\r\n  const [queryArgs, setQueryArgs] = useState(\"\");\r\n  const [sortAscending, setSortAscending] = useState(false);\r\n  const [currSort, setCurrSort] = useState(\"timeCreated\"); // default when loading page\r\n\r\n  const useLocalHost = false; // change this to true if u want to use localHost, make sure to start your localhost server then\r\n  useLocalHost\r\n    ? (url = \"http://localhost:8080/api\")\r\n    : (url = \"https://tamk-4a00ez62-3001-group04.herokuapp.com/api\");\r\n\r\n  const [todos, setTodos] = useState([]);\r\n  const [folders, setFolders] = useState([]);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [queryArgs]);\r\n\r\n  const searchData = async (str) => {\r\n    // fetch all in case of null\r\n    str === null ? setQueryArgs(\"\") : setQueryArgs(`?search=${str}`);\r\n  };\r\n\r\n  // sort todoArray without changing rules for sorting\r\n  const sortTodos = (tasks, table) => {\r\n    let arr = [...tasks];\r\n\r\n    const sortFunc = (a, b) => {\r\n      if (a[table] > b[table]) {\r\n        return 1;\r\n      } else if (a[table] < b[table]) {\r\n        return -1;\r\n      } else if (a[table] === null) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    };\r\n    sortAscending\r\n      ? arr.sort((a, b) => sortFunc(a, b))\r\n      : arr.sort((b, a) => sortFunc(a, b));\r\n\r\n    return arr;\r\n  };\r\n\r\n  // used to trigger sort and change direction of sorting, also saves new save rule for table\r\n  const sortTodosHandler = (table) => {\r\n    if (table !== currSort) {\r\n      setCurrSort(table);\r\n    }\r\n    setTodos(sortTodos(todos, table));\r\n  };\r\n\r\n  const fetchData = () => {\r\n    const fetchTable = async (table, query = \"\") => {\r\n      const response = await axios.get(url + \"/\" + table + query);\r\n      //console.log(response.data);\r\n      return response.data;\r\n    };\r\n\r\n    Promise.all([fetchTable(\"tasks\", queryArgs), fetchTable(\"folders\")])\r\n      .then((data) => {\r\n        const temp = sortTodos(data[0], currSort);\r\n        setTodos(temp);\r\n        setFolders(data[1]);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  const postTaskHandler = async (task) => {\r\n    try {\r\n      if (task.id !== undefined) {\r\n        await axios.post(url + `/tasks/${task.id}`, {\r\n          ...task,\r\n        });\r\n      } else {\r\n        await axios.post(url + \"/tasks\", {\r\n          ...task,\r\n        });\r\n      }\r\n      fetchData(); // Fetch tasks again after a successful post request\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const postFolderHandler = async (folder) => {\r\n    try {\r\n      await axios.post(url + `/folders`, { ...folder });\r\n      fetchData();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    const res = await axios.delete(url + \"/tasks/\" + id);\r\n    // 204 = ok no content\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const handleFolderDelete = async (id) => {\r\n    const res = await axios.delete(url + \"/folders/\" + id);\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const deleteAllTasks = async () => {\r\n    const res = await axios.delete(url + \"/tasks/\");\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n\r\n  const deleteAllFolders = async () => {\r\n    const res = await axios.delete(url + \"/folders/\");\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const [navSize, setNavSize] = useState(\"0px\");\r\n  let smallScreen = useMediaQuery({ query: \"(max-width: 900px)\" });\r\n  const CloseNav = () => {\r\n    if (smallScreen) {\r\n      setNavSize(\"0px\");\r\n    }\r\n  };\r\n  const HandleNavSizeChange = () => {\r\n    smallScreen\r\n      ? setNavSize(navSize === \"100%\" ? \"0%\" : \"100%\")\r\n      : setNavSize(navSize === \"200px\" ? \"0px\" : \"200px\");\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Header searchData={searchData} />\r\n      <LeftNav\r\n        navSize={navSize}\r\n        handleNavSizeChange={HandleNavSizeChange}\r\n        closeNav={CloseNav}\r\n      />\r\n      <Layout navSize={navSize}>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home\r\n              todos={todos}\r\n              folders={folders}\r\n              handleDelete={handleDelete}\r\n              closeNav={CloseNav}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              setSelectedTask={setSelectedTask}\r\n              sortTodosHandler={sortTodosHandler}\r\n              searchData={searchData}\r\n              sortAscending={sortAscending}\r\n              setSortAscending={setSortAscending}\r\n              currSort={currSort}\r\n            />\r\n          </Route>\r\n\r\n          <Route exact path=\"/folders\">\r\n            <Folders\r\n              todos={todos}\r\n              folders={folders}\r\n              handleDelete={handleDelete}\r\n              closeNav={CloseNav}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              setSelectedTask={setSelectedTask}\r\n              sortTodosHandler={sortTodosHandler}\r\n              handleFolderDelete={handleFolderDelete}\r\n              postFolderHandler={postFolderHandler}\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/settings\">\r\n            <Settings\r\n              deleteAllTasks={deleteAllTasks}\r\n              deleteAllFolders={deleteAllFolders}\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/add\">\r\n            <AddTodo\r\n              todos={todos}\r\n              folders={folders}\r\n              setTodos={setTodos}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              postFolderHandler={postFolderHandler}\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/task\">\r\n            <TaskView\r\n              folders={folders}\r\n              selectedTask={selectedTask}\r\n              setSelectedTask={setSelectedTask}\r\n              postTaskHandler={postTaskHandler}\r\n              postFolderHandler={postFolderHandler}\r\n              todos={todos}\r\n              handleDelete={handleDelete}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}