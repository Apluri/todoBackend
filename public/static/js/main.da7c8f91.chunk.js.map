{"version":3,"sources":["components/TitleComponent.js","components/Header.js","components/TodoList.js","components/Home.js","components/Folders.js","components/Settings.js","components/AddTodo.js","components/LeftNav.js","components/Layout.js","components/TaskViewEdit.js","components/TaskViewShow.js","components/TaskView.js","App.js","index.js"],"names":["TitleComponent","url","useLocation","pathname","getTitle","Header","searchData","useState","className","TodoList","selectedFolder","todos","folders","sortTodosHandler","handleDelete","postTaskHandler","setSelectedTask","itemsToPrint","history","useHistory","sqlDateToDateString","d","temp","Date","getDate","slice","getMonth","renderColumns","todo","map","index","renderTitle","renderDescription","timeCreated","renderDeadLine","renderFolder","folder_id","isDone","title","description","deadline","id","length","item","indexOf","name","renderDeleteButton","Icon","onClick","renderIsDone","Checkbox","checked","Boolean","onChange","e","event","task","editedTask","handleChange","color","inputProps","undefined","push","wrapperFunction","printTodos","Home","closeNav","classes","selectFolder","Folders","handleFolderDelete","postFolderHandler","setSelectedFolder","dropdownRef","useRef","folderListActive","setFolderListActive","closeFolderList","folderCurrInput","setFolderCurrInput","setIsActive","useEffect","handleClick","current","contains","target","document","addEventListener","removeEventListener","submitFolder","ref","type","placeholder","value","folder","Settings","deleteAllTasks","deleteAllFolders","AddTodo","setTodos","navSize","currInput","setCurrInput","dCurrInput","setDCurrInput","taskFolderId","setTaskFolderId","folderNamePrint","setFolderNamePrint","isActive","calendarActive","setCalendarActive","closeFolder","calendarRef","tzoffset","v","offSet","getTimezoneOffset","setHours","toISOString","split","handleSubmit","preventDefault","newTodo","onSubmit","isNaN","addFolderWrapper","toDateString","locale","LeftNav","handleNavSizeChange","style","width","exact","to","activeClassName","Layout","props","children","TaskViewEdit","selectedTask","toggleMode","redirect","calendarValue","setCalendarValue","TaskViewShow","TaskView","editMode","setEditMode","App","queryArgs","setQueryArgs","sortAscending","currSort","setCurrSort","setFolders","fetchData","str","a","sortTodos","tasks","table","arr","sortFunc","b","sort","fetchTable","query","axios","get","response","data","Promise","all","then","catch","console","log","post","delete","res","status","setNavSize","smallScreen","useMediaQuery","CloseNav","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.da7c8f91.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst TitleComponent = () => {\r\n  const url = useLocation();\r\n\r\n  const getTitle = () => {\r\n    switch (url.pathname) {\r\n      case \"/\":\r\n        return \"Home\";\r\n      case \"/folders\":\r\n        return \"Folders\";\r\n      case \"/settings\":\r\n        return \"Settings\";\r\n      case \"/add\":\r\n        return \"Add task\";\r\n      case \"/task\":\r\n        return \"Task description\";\r\n      default:\r\n        return \"Something went wrong :)\";\r\n    }\r\n  };\r\n\r\n  return <h1>{getTitle()}</h1>;\r\n};\r\n\r\nexport default TitleComponent;\r\n","// useState to replace need for props usage\r\nimport React, { useState } from \"react\";\r\nimport TitleComponent from \"./TitleComponent\";\r\n\r\nconst Header = ({ searchData }) => {\r\n  const [currInput, setCurrInput] = useState(\"\");\r\n  const handleSubmit = (e) => {\r\n    // prevent reload?\r\n    e.preventDefault();\r\n    if (currInput.length > 0) {\r\n      searchData(currInput);\r\n      setCurrInput(\"\");\r\n    } else {\r\n      // null means fetchAll\r\n      searchData(null);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"header\">\r\n      <TitleComponent />\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n\r\n/*\r\n<form onSubmit={(e) => handleSubmit(e)}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"title, description, deadline\"\r\n          value={currInput}\r\n          onChange={(e) => setCurrInput(e.target.value)}\r\n        />\r\n        <button>Search</button>\r\n      </form>\r\n*/\r\n","import React, { useState } from \"react\";\r\nimport { Checkbox, Icon } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst TodoList = ({\r\n  selectedFolder,\r\n  todos,\r\n  sortTodosHandler,\r\n  folders,\r\n  handleDelete,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n}) => {\r\n  // numbers represents indexes of todo tasks\r\n  const [itemsToPrint, setItemsToPrint] = useState([3, 1, 5]);\r\n  let history = useHistory();\r\n  let wrapperFunction = (todo) => {\r\n    setSelectedTask(todo);\r\n\r\n    history.push(\"/task\");\r\n  };\r\n  // pass value here to print spesific folder\r\n  const checkIfPrint = (id) => {\r\n    return selectedFolder === null || selectedFolder === undefined\r\n      ? true\r\n      : selectedFolder.id === id\r\n      ? true\r\n      : false;\r\n  };\r\n  const handleChange = (event, task) => {\r\n    // post check\r\n    const editedTask = { ...task };\r\n    editedTask.isDone = !editedTask.isDone;\r\n    postTaskHandler(editedTask);\r\n\r\n    //setChecked(event.target.checked);\r\n  };\r\n\r\n  // Function to convert the sql-date to preferred string with prefixed zeros\r\n  let sqlDateToDateString = (d) => {\r\n    if (d !== null) {\r\n      let temp = new Date(d);\r\n      let dateFormat = `${(\"0\" + temp.getDate()).slice(-2)}.${(\r\n        \"0\" +\r\n        (temp.getMonth() + 1)\r\n      ).slice(-2)}.`;\r\n      return dateFormat;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  // prints sql table names as titles\r\n  const printTitles = () => {\r\n    let arr;\r\n    todos[0] !== undefined ? (arr = [...Object.keys(todos[0])]) : (arr = null);\r\n    if (arr) {\r\n      return (\r\n        <ul>\r\n          {itemsToPrint.map((index) => {\r\n            switch (index) {\r\n              case 1:\r\n                return <li> Title</li>;\r\n              case 2:\r\n                return <li> Description</li>;\r\n              case 3:\r\n                return <li> Status</li>;\r\n              case 4:\r\n                return <li> Creation time</li>;\r\n              case 5:\r\n                return <li> Deadline</li>;\r\n              case 6:\r\n                return <li> Folder</li>;\r\n              default:\r\n                return <li>{arr[index]}</li>;\r\n            }\r\n          })}\r\n        </ul>\r\n      );\r\n    }\r\n    return <li>Missing titles</li>;\r\n  };\r\n\r\n  const printTodos = () => {\r\n    const renderColumns = (todo) => {\r\n      return (\r\n        <>\r\n          {itemsToPrint.map((index) => {\r\n            switch (index) {\r\n              case 1:\r\n                return renderTitle(todo);\r\n              case 2:\r\n                return <div> {renderDescription(todo)}</div>;\r\n              //case 3:\r\n              //  return <div>{renderIsDone(todo)}</div>;\r\n              case 4:\r\n                return <div> {todo.timeCreated}</div>; // should not be used outside testing\r\n              case 5:\r\n                return <div>{renderDeadLine(todo)}</div>;\r\n\r\n              case 6:\r\n                return <div> {renderFolder(todo.folder_id)}</div>;\r\n              default:\r\n                return <> </>;\r\n            }\r\n          })}\r\n        </>\r\n      );\r\n    };\r\n    const renderTitle = (todo) => {\r\n      return (\r\n        <div className={todo.isDone ? \"task-done\" : \"task-test\"}>\r\n          {todo.title}\r\n        </div>\r\n      );\r\n    };\r\n    const renderDescription = (todo) => {\r\n      return <>{todo.description} </>;\r\n    };\r\n    const renderDeadLine = (todo) => {\r\n      return <> {sqlDateToDateString(todo.deadline)} </>;\r\n    };\r\n\r\n    const renderFolder = (id) => {\r\n      if (folders.length === 0 || id === null) return null;\r\n      return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n    };\r\n    const renderDeleteButton = (todo) => {\r\n      return (\r\n        <>\r\n          <Icon className=\"fa fa-trash\" onClick={() => handleDelete(todo.id)} />\r\n        </>\r\n      );\r\n    };\r\n    const renderIsDone = (todo) => {\r\n      return (\r\n        <>\r\n          <Checkbox\r\n            checked={Boolean(todo.isDone)}\r\n            onChange={(e) => handleChange(e, todo)}\r\n            color=\"default\"\r\n            inputProps={{ \"aria-label\": \"checkbox with default color\" }}\r\n          />\r\n        </>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        {todos.map(\r\n          (todo) =>\r\n            checkIfPrint(todo.folder_id) && (\r\n              <div className=\"todo-item\" key={todo.id}>\r\n                <div>{renderIsDone(todo)} </div>\r\n                <div\r\n                  className=\"clickable-area\"\r\n                  onClick={() => wrapperFunction(todo)}\r\n                >\r\n                  {renderColumns(todo)}\r\n                </div>\r\n                <div>{renderDeleteButton(todo)}</div>\r\n              </div>\r\n            )\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Things to do</h1>\r\n      <div className=\"todos\"> {printTodos()}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst Home = ({\r\n  todos,\r\n  folders,\r\n  handleDelete,\r\n  closeNav,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n  sortTodosHandler,\r\n}) => {\r\n  let history = useHistory();\r\n  let wrapperFunction = () => {\r\n    closeNav();\r\n    history.push(\"/add\");\r\n  };\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <div className=\"add-btn\">\r\n        <Icon\r\n          classes\r\n          className=\"fa fa-plus-square\"\r\n          onClick={() => wrapperFunction()}\r\n        />\r\n      </div>\r\n      <TodoList\r\n        selectFolder={null}\r\n        todos={todos}\r\n        folders={folders}\r\n        handleDelete={handleDelete}\r\n        postTaskHandler={postTaskHandler}\r\n        setSelectedTask={setSelectedTask}\r\n        sortTodosHandler={sortTodosHandler}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport TodoList from \"./TodoList\";\r\n\r\nconst Folders = ({\r\n  todos,\r\n  folders,\r\n  handleDelete,\r\n  postTaskHandler,\r\n  setSelectedTask,\r\n  sortTodosHandler,\r\n  handleFolderDelete,\r\n  postFolderHandler,\r\n}) => {\r\n  const [selectedFolder, setSelectedFolder] = useState(null);\r\n  //dropdown\r\n  const dropdownRef = useRef(null);\r\n  const [folderListActive, setFolderListActive] = useState(false);\r\n  // handle outside clicks\r\n  const closeFolderList = useRef();\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolderList.current.contains(e.target)) {\r\n        if (folderListActive) {\r\n          setFolderListActive(!folderListActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [folderListActive]);\r\n  const addFolderWrapper = (folder) => {\r\n    submitFolder();\r\n    setIsActive(false);\r\n  };\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"dropdown-menu-container\" ref={closeFolderList}>\r\n        Folder selected:\r\n        {selectedFolder !== null\r\n          ? ` ${selectedFolder.name}`\r\n          : \" No folder selected\"}\r\n        <br />\r\n        <button\r\n          onClick={() => setFolderListActive(!folderListActive)}\r\n          className=\"folder-button-trigger\"\r\n        >\r\n          Select folder\r\n        </button>\r\n        <div className=\"folders\">\r\n          <nav\r\n            ref={dropdownRef}\r\n            className={`menu ${folderListActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <ul>\r\n              <li>\r\n                Create Folder\r\n                <form>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Folder title\"\r\n                    value={folderCurrInput}\r\n                    onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                  ></input>\r\n                </form>\r\n                <button onClick={addFolderWrapper}>Add</button>\r\n              </li>\r\n              <div>\r\n                {folders.map((folder) => (\r\n                  <li key={folder.id}>\r\n                    <button\r\n                      className=\"folders-btn\"\r\n                      onClick={() => setSelectedFolder(folder)}\r\n                    >\r\n                      {folder.name}\r\n                    </button>\r\n                    <button onClick={() => handleFolderDelete(folder.id)}>\r\n                      delete\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </div>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n      <TodoList\r\n        selectedFolder={selectedFolder}\r\n        todos={todos}\r\n        folders={folders}\r\n        handleDelete={handleDelete}\r\n        postTaskHandler={postTaskHandler}\r\n        setSelectedTask={setSelectedTask}\r\n        sortTodosHandler={sortTodosHandler}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Folders;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nconst Settings = ({ deleteAllTasks, deleteAllFolders }) => {\r\n  const wrapper = () => {\r\n    deleteAllTasks();\r\n    deleteAllFolders();\r\n  };\r\n  return (\r\n    <div className=\"settings\">\r\n      <br />\r\n      <button onClick={() => deleteAllTasks()}>Delete all tasks</button>\r\n      <br />\r\n      <button onClick={() => deleteAllFolders()}>Delete all folders</button>\r\n      <br />\r\n      <button onClick={() => wrapper()}>Full reset</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst AddTodo = ({\r\n  todos,\r\n  setTodos,\r\n  folders,\r\n  navSize,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n}) => {\r\n  // title\r\n  const [currInput, setCurrInput] = useState(\"\");\r\n  // description\r\n  const [dCurrInput, setDCurrInput] = useState(\"\");\r\n  // folder\r\n  const [taskFolderId, setTaskFolderId] = useState(null);\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n  // for showing currently selected folder\r\n  const [folderNamePrint, setFolderNamePrint] = useState(\"\");\r\n  // calendar\r\n  const [value, onChange] = useState(null);\r\n  // dropdown\r\n  const dropdownRef = useRef(null);\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  //calendar dropdown\r\n  const [calendarActive, setCalendarActive] = useState(false);\r\n\r\n  // handle clicks when clicked outside select folder\r\n  const closeFolder = useRef();\r\n  const calendarRef = useRef();\r\n  const folderWrapper = () => {\r\n    if (calendarActive) {\r\n      setCalendarActive(!calendarActive);\r\n    }\r\n    setIsActive(!isActive);\r\n  };\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolder.current.contains(e.target)) {\r\n        if (isActive) {\r\n          setIsActive(!isActive);\r\n        }\r\n      }\r\n      if (!calendarRef.current.contains(e.target)) {\r\n        if (calendarActive) {\r\n          setCalendarActive(!calendarActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [isActive, calendarActive]);\r\n\r\n  // wrapper function for closing dropdown\r\n  // creating a folder or selecting existing\r\n  const addFolderWrapper = (folder) => {\r\n    isNaN(folder.id) ? submitFolder() : setTaskFolderId(folder.id);\r\n    setFolderNamePrint(folder.name);\r\n    setIsActive(false);\r\n  };\r\n\r\n  // for redirecting\r\n  let history = useHistory();\r\n\r\n  // handle timezone offset for sql-date conversion\r\n  // takes Date.object as an argument\r\n  let tzoffset = (v) => {\r\n    let offSet = v.getTimezoneOffset() / 60;\r\n    if (offSet < 0) {\r\n      offSet = offSet - offSet * 2;\r\n    }\r\n    v.setHours(offSet);\r\n    v = v.toISOString().split(\"T\")[0];\r\n    return v;\r\n  };\r\n\r\n  // function to close dropdownmenu on outside-clicks\r\n\r\n  // here we could send task to sql server and then fetch tasks again\r\n  // currently recreating todos state\r\n  const handleSubmit = (e) => {\r\n    // prevent reload?\r\n    e.preventDefault();\r\n\r\n    // create new task and post it\r\n    const newTodo = {\r\n      title: currInput,\r\n      description: dCurrInput, // add logic here\r\n      deadline: value === null ? null : tzoffset(value),\r\n      folder_id: taskFolderId,\r\n    };\r\n    postTaskHandler(newTodo);\r\n\r\n    // set input to empty when submitting -is this needed? works without\r\n    setCurrInput(\"\");\r\n    //setDCurrInput(\"\");\r\n\r\n    // redirect to homepage after submit\r\n    history.push(\"/\");\r\n  };\r\n\r\n  // handles folder creation & post\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"add-todo\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Task title\"\r\n            value={currInput}\r\n            onChange={(e) => setCurrInput(e.target.value)}\r\n          />\r\n          <button>Add</button>\r\n        </form>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"description-box\">\r\n            <textarea\r\n              type=\"text\"\r\n              placeholder=\"Task description (optional)\"\r\n              value={dCurrInput}\r\n              onChange={(e) => setDCurrInput(e.target.value)}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div className=\"dropdown-menu-container\" ref={closeFolder}>\r\n        <div>\r\n          <Icon\r\n            classes\r\n            className=\"fa fa-folder-open\"\r\n            onClick={() => folderWrapper()}\r\n          />\r\n          {folderNamePrint == \"\" ? \"No folder selected\" : folderNamePrint}\r\n        </div>\r\n        <div className=\"folders\">\r\n          <nav\r\n            ref={dropdownRef}\r\n            className={`menu ${isActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <ul>\r\n              <li>\r\n                Create Folder\r\n                <form onSubmit={handleSubmit}>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Folder title\"\r\n                    value={folderCurrInput}\r\n                    onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                  ></input>\r\n                </form>\r\n                <Icon\r\n                  className=\"fa fa-plus-square\"\r\n                  onClick={() => submitFolder()}\r\n                />\r\n              </li>\r\n              <div>\r\n                {folders.map((folder) => (\r\n                  <li key={folder.id}>\r\n                    <button\r\n                      className=\"folders-btn\"\r\n                      onClick={() => addFolderWrapper(folder)}\r\n                    >\r\n                      {folder.name}\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </div>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        <div className=\"date-selection-show\">\r\n          <Icon\r\n            className=\"fa fa-calendar\"\r\n            onClick={() => setCalendarActive(!calendarActive)}\r\n          />\r\n          {value === null ? \"No date selected\" : value.toDateString()}\r\n        </div>\r\n        <div className=\"calendar-container\" ref={calendarRef}>\r\n          <nav\r\n            ref={calendarRef}\r\n            className={`menu ${calendarActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <Calendar value={null} locale={\"en-EN\"} onChange={onChange} />\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n/*\r\n<div className=\"date-selection-show\">\r\n        <Icon\r\n          className=\"fa fa-calendar\"\r\n          onClick={setCalendarActive(!calendarActive)}\r\n        />\r\n        {value === null ? \"No date selected\" : value.toDateString()}\r\n      </div>\r\n      <div className=\"calendar-container\" ref={calendarRef}>\r\n        <div className={`menu ${calendarActive ? \"active\" : \"inactive\"}`}>\r\n          <Calendar value={null} locale={\"en-EN\"} onChange={onChange} />\r\n        </div>\r\n      </div>\r\n*/\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\"; // import { Link } from \"react-router-dom\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nconst LeftNav = ({ navSize, handleNavSizeChange }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"left-sidebar\" style={{ width: navSize }}>\r\n        <nav className=\"navbar\">\r\n          <NavLink\r\n            exact\r\n            to={\"/\"}\r\n            className=\"navlink-home\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon classes className=\"fa fa-home\" />\r\n            Home\r\n          </NavLink>\r\n          <NavLink\r\n            to={\"/folders\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon classes className=\"fa fa-folder-open\" />\r\n            Folders\r\n          </NavLink>\r\n          <NavLink\r\n            to={\"/settings\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            <Icon classes className=\"fa fa-cog\" />\r\n            Settings\r\n          </NavLink>\r\n        </nav>\r\n      </div>\r\n      <div className=\"burger-btn\">\r\n        <Icon\r\n          classes\r\n          className=\"fa fa-bars\"\r\n          onClick={() => handleNavSizeChange()}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftNav;\r\n","import React from \"react\";\r\n\r\nconst Layout = (props) => (\r\n  <div className=\"content\">\r\n    <div className={props.navSize === \"100%\" ? \"blur\" : \"\"}>\r\n      {props.children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Layout;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\n\r\nconst TaskViewEdit = ({\r\n  folders,\r\n  selectedTask,\r\n  setSelectedTask,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n  toggleMode,\r\n  handleDelete,\r\n  redirect,\r\n}) => {\r\n  // title\r\n  const [currInput, setCurrInput] = useState(selectedTask.title);\r\n\r\n  // description\r\n  const [dCurrInput, setDCurrInput] = useState(selectedTask.description);\r\n\r\n  // calendar\r\n  const [calendarValue, setCalendarValue] = useState(\r\n    selectedTask.deadline === null ? null : new Date(selectedTask.deadline)\r\n  );\r\n\r\n  // date conversion to sql\r\n  let tzoffset = (v) => {\r\n    let offSet = v.getTimezoneOffset() / 60;\r\n    if (offSet < 0) {\r\n      offSet = offSet - offSet * 2;\r\n    }\r\n    v.setHours(offSet);\r\n    v = v.toISOString().split(\"T\")[0];\r\n    return v;\r\n  };\r\n\r\n  //folder\r\n  const [taskFolderId, setTaskFolderId] = useState(selectedTask.folder_id);\r\n  const [folderCurrInput, setFolderCurrInput] = useState(\"\");\r\n  // dropdown\r\n  const dropdownRef = useRef(null);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  // handle clicks when clicked outside select folder\r\n  const closeFolder = useRef();\r\n  useEffect(() => {\r\n    const handleClick = (e) => {\r\n      // outside click\r\n      if (!closeFolder.current.contains(e.target)) {\r\n        if (isActive) {\r\n          setIsActive(!isActive);\r\n        }\r\n      }\r\n    };\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, [isActive]);\r\n\r\n  // wrapper function for closing dropdown\r\n  // creating a folder or selecting existing\r\n  const addFolderWrapper = (folder) => {\r\n    isNaN(folder.id) ? submitFolder() : setTaskFolderId(folder.id);\r\n    setIsActive(false);\r\n  };\r\n  const handleSubmit = () => {\r\n    // prevent reload?\r\n    //e.preventDefault();\r\n\r\n    // edit task and post it\r\n    const editedTask = { ...selectedTask };\r\n    editedTask.id = selectedTask.id;\r\n    editedTask.title = currInput;\r\n    editedTask.description = dCurrInput;\r\n    editedTask.deadline =\r\n      calendarValue === null ? null : tzoffset(calendarValue);\r\n    editedTask.folder_id = taskFolderId;\r\n    setSelectedTask(editedTask);\r\n    postTaskHandler(editedTask);\r\n\r\n    // set input to empty when submitting -is this needed? works without\r\n    setCurrInput(\"\");\r\n    //setDCurrInput(\"\");\r\n    toggleMode();\r\n    // redirect to homepage after submit\r\n    // history.push(\"/\");\r\n  };\r\n\r\n  // handles folder creation & post\r\n  const submitFolder = () => {\r\n    const newFolder = {\r\n      name: folderCurrInput,\r\n    };\r\n    postFolderHandler(newFolder);\r\n  };\r\n  const renderFolder = (id) => {\r\n    if (folders.length === 0) return null;\r\n    return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n  };\r\n  const wrapper = () => {\r\n    handleSubmit();\r\n    toggleMode();\r\n  };\r\n  const deleteWrapper = () => {\r\n    handleDelete(selectedTask.id);\r\n    redirect();\r\n  };\r\n  return (\r\n    <>\r\n      <button onClick={() => wrapper()}>save</button>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Task title\"\r\n          value={currInput}\r\n          onChange={(e) => setCurrInput(e.target.value)}\r\n        />\r\n      </form>\r\n      <br />\r\n      <form>\r\n        <div className=\"description-box\">\r\n          <textarea\r\n            type=\"text\"\r\n            placeholder=\"Task description (optional)\"\r\n            value={dCurrInput}\r\n            onChange={(e) => setDCurrInput(e.target.value)}\r\n          />\r\n        </div>\r\n      </form>\r\n      <br />\r\n      <div className=\"dropdown-menu-container\" ref={closeFolder}>\r\n        Folder selected:{\" \"}\r\n        {taskFolderId == null ? \"nothing\" : renderFolder(taskFolderId)}\r\n        <br />\r\n        <button\r\n          onClick={() => setIsActive(!isActive)}\r\n          className=\"folder-button-trigger\"\r\n        >\r\n          Select folder\r\n        </button>\r\n        <div className=\"folders\">\r\n          <nav\r\n            ref={dropdownRef}\r\n            className={`menu ${isActive ? \"active\" : \"inactive\"}`}\r\n          >\r\n            <ul>\r\n              <li>\r\n                Create Folder\r\n                <form onSubmit={handleSubmit}>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Folder title\"\r\n                    value={folderCurrInput}\r\n                    onChange={(e) => setFolderCurrInput(e.target.value)}\r\n                  ></input>\r\n                </form>\r\n                <button onClick={addFolderWrapper}>Add</button>\r\n              </li>\r\n              <div>\r\n                {folders.map((folder) => (\r\n                  <li key={folder.id}>\r\n                    <button\r\n                      className=\"folders-btn\"\r\n                      onClick={() => addFolderWrapper(folder)}\r\n                    >\r\n                      {folder.name}\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </div>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n      Date selected:{\" \"}\r\n      {calendarValue === null && selectedTask.deadline === null\r\n        ? \"nothing\"\r\n        : calendarValue === null && selectedTask.deadline !== null\r\n        ? new Date(selectedTask.deadline).toDateString()\r\n        : calendarValue.toDateString()}\r\n      <div className=\"calendar-container\">\r\n        <Calendar\r\n          value={calendarValue}\r\n          locale={\"en-EN\"}\r\n          onChange={setCalendarValue}\r\n        />\r\n      </div>\r\n      <button onClick={() => deleteWrapper()}>Delete task</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskViewEdit;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst TaskViewShow = ({\r\n  folders,\r\n  selectedTask,\r\n  toggleMode,\r\n  handleDelete,\r\n  redirect,\r\n}) => {\r\n  const deleteWrapper = () => {\r\n    handleDelete(selectedTask.id);\r\n    redirect();\r\n  };\r\n  const renderFolder = (id) => {\r\n    if (folders.length === 0) return null;\r\n    return folders[folders.map((item) => item.id).indexOf(id)].name;\r\n  };\r\n  return (\r\n    <div className=\"show-container\">\r\n      <button onClick={() => toggleMode()}>edit</button>\r\n      <div className=\"show-folder\">Folder:</div>\r\n      <div className=\"show-folder-content\">\r\n        {selectedTask.folder_id === null\r\n          ? \"\"\r\n          : renderFolder(selectedTask.folder_id)}\r\n        <div className=\"show-title\">Title</div>\r\n        <div className=\"show-title-content\">{selectedTask.title}</div>\r\n      </div>\r\n\r\n      <div className=\"show-description\">Description:</div>\r\n      <div className=\"show-description-content\">{selectedTask.description}</div>\r\n      <div className=\"show-deadline\">Deadline:</div>\r\n      <div className=\"show-deadline-content\">\r\n        {\" \"}\r\n        {selectedTask.deadline === null\r\n          ? \"\"\r\n          : new Date(selectedTask.deadline).toDateString()}\r\n      </div>\r\n\r\n      <button onClick={() => deleteWrapper()}>Delete task</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskViewShow;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TaskViewEdit from \"./TaskViewEdit\";\r\nimport TaskViewShow from \"./TaskViewShow\";\r\n\r\nconst TaskView = ({\r\n  folders,\r\n  selectedTask,\r\n  setSelectedTask,\r\n  postTaskHandler,\r\n  postFolderHandler,\r\n  handleDelete,\r\n}) => {\r\n  const history = useHistory();\r\n  const redirect = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const [editMode, setEditMode] = useState(false);\r\n  const toggleMode = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n  return !selectedTask ? (\r\n    <> {redirect()}</>\r\n  ) : editMode ? (\r\n    <>\r\n      <br />\r\n      <TaskViewEdit\r\n        folders={folders}\r\n        selectedTask={selectedTask}\r\n        setSelectedTask={setSelectedTask}\r\n        postTaskHandler={postTaskHandler}\r\n        postFolderHandler={postFolderHandler}\r\n        toggleMode={toggleMode}\r\n        handleDelete={handleDelete}\r\n        redirect={redirect}\r\n      />\r\n    </>\r\n  ) : (\r\n    <>\r\n      <br />\r\n      <TaskViewShow\r\n        folders={folders}\r\n        selectedTask={selectedTask}\r\n        toggleMode={toggleMode}\r\n        handleDelete={handleDelete}\r\n        redirect={redirect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskView;\r\n","import \"./App.scss\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport axios from \"axios\";\r\n\r\n// local components\r\nimport Header from \"./components/Header\";\r\nimport Home from \"./components/Home\";\r\nimport Folders from \"./components/Folders\";\r\nimport Settings from \"./components/Settings\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport LeftNav from \"./components/LeftNav\";\r\nimport Layout from \"./components/Layout\";\r\nimport TaskView from \"./components/TaskView\";\r\n\r\nconst App = () => {\r\n  // simulates tasklist fetched from backend\r\n  let url = \"\";\r\n  const [queryArgs, setQueryArgs] = useState(\"\");\r\n  const sortAscending = useRef(true);\r\n  const [currSort, setCurrSort] = useState(\"timeCreated\"); // default when loading page\r\n\r\n  const useLocalHost = false; // change this to true if u want to use localHost, make sure to start your localhost server then\r\n  useLocalHost\r\n    ? (url = \"http://localhost:8080/api\")\r\n    : (url = \"https://tamk-4a00ez62-3001-group04.herokuapp.com/api\");\r\n\r\n  const [todos, setTodos] = useState([]);\r\n  const [folders, setFolders] = useState([]);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [queryArgs]);\r\n\r\n  const searchData = async (str) => {\r\n    // fetch all in case of null\r\n    str === null ? setQueryArgs(\"\") : setQueryArgs(`?search=${str}`);\r\n  };\r\n\r\n  // sort todoArray without changing rules for sorting\r\n  const sortTodos = (tasks, table) => {\r\n    let arr = [...tasks];\r\n\r\n    const sortFunc = (a, b) => {\r\n      if (a[table] > b[table]) {\r\n        return 1;\r\n      } else if (a[table] < b[table]) {\r\n        return -1;\r\n      } else if (a[table] === null) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    };\r\n    sortAscending.current\r\n      ? arr.sort((a, b) => sortFunc(a, b))\r\n      : arr.sort((b, a) => sortFunc(a, b));\r\n\r\n    return arr;\r\n  };\r\n\r\n  // used to trigger sort and change direction of sorting, also saves new save rule for table\r\n  const sortTodosHandler = (table) => {\r\n    if (table !== currSort) {\r\n      setCurrSort(table);\r\n    }\r\n    sortAscending.current = !sortAscending.current;\r\n\r\n    setTodos(sortTodos(todos, table));\r\n  };\r\n\r\n  const fetchData = () => {\r\n    const fetchTable = async (table, query = \"\") => {\r\n      const response = await axios.get(url + \"/\" + table + query);\r\n      //console.log(response.data);\r\n      return response.data;\r\n    };\r\n\r\n    Promise.all([fetchTable(\"tasks\", queryArgs), fetchTable(\"folders\")])\r\n      .then((data) => {\r\n        const temp = sortTodos(data[0], currSort);\r\n        setTodos(temp);\r\n        setFolders(data[1]);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  const postTaskHandler = async (task) => {\r\n    try {\r\n      if (task.id !== undefined) {\r\n        await axios.post(url + `/tasks/${task.id}`, {\r\n          ...task,\r\n        });\r\n      } else {\r\n        await axios.post(url + \"/tasks\", {\r\n          ...task,\r\n        });\r\n      }\r\n      fetchData(); // Fetch tasks again after a successful post request\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const postFolderHandler = async (folder) => {\r\n    try {\r\n      await axios.post(url + `/folders`, { ...folder });\r\n      fetchData();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    const res = await axios.delete(url + \"/tasks/\" + id);\r\n    // 204 = ok no content\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const handleFolderDelete = async (id) => {\r\n    const res = await axios.delete(url + \"/folders/\" + id);\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const deleteAllTasks = async () => {\r\n    const res = await axios.delete(url + \"/tasks/\");\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n\r\n  const deleteAllFolders = async () => {\r\n    const res = await axios.delete(url + \"/folders/\");\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchData();\r\n  };\r\n  const [navSize, setNavSize] = useState(\"0px\");\r\n  let smallScreen = useMediaQuery({ query: \"(max-width: 900px)\" });\r\n  const CloseNav = () => {\r\n    if (smallScreen) {\r\n      setNavSize(\"0px\");\r\n    }\r\n  };\r\n  const HandleNavSizeChange = () => {\r\n    smallScreen\r\n      ? setNavSize(navSize === \"100%\" ? \"0%\" : \"100%\")\r\n      : setNavSize(navSize === \"300px\" ? \"0px\" : \"300px\");\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Header searchData={searchData} />\r\n      <LeftNav navSize={navSize} handleNavSizeChange={HandleNavSizeChange} />\r\n      <Layout navSize={navSize}>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home\r\n              todos={todos}\r\n              folders={folders}\r\n              handleDelete={handleDelete}\r\n              closeNav={CloseNav}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              setSelectedTask={setSelectedTask}\r\n              sortTodosHandler={sortTodosHandler}\r\n            />\r\n          </Route>\r\n\r\n          <Route path=\"/folders\">\r\n            <Folders\r\n              todos={todos}\r\n              folders={folders}\r\n              handleDelete={handleDelete}\r\n              closeNav={CloseNav}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              setSelectedTask={setSelectedTask}\r\n              sortTodosHandler={sortTodosHandler}\r\n              handleFolderDelete={handleFolderDelete}\r\n              postFolderHandler={postFolderHandler}\r\n            />\r\n          </Route>\r\n          <Route path=\"/settings\">\r\n            <Settings\r\n              deleteAllTasks={deleteAllTasks}\r\n              deleteAllFolders={deleteAllFolders}\r\n            />\r\n          </Route>\r\n          <Route path=\"/add\">\r\n            <AddTodo\r\n              todos={todos}\r\n              folders={folders}\r\n              setTodos={setTodos}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n              postFolderHandler={postFolderHandler}\r\n            />\r\n          </Route>\r\n          <Route path=\"/task\">\r\n            <TaskView\r\n              folders={folders}\r\n              selectedTask={selectedTask}\r\n              setSelectedTask={setSelectedTask}\r\n              postTaskHandler={postTaskHandler}\r\n              postFolderHandler={postFolderHandler}\r\n              todos={todos}\r\n              handleDelete={handleDelete}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}