{"version":3,"sources":["components/TitleComponent.js","components/Header.js","components/TodoList.js","components/Home.js","components/Folders.js","components/Settings.js","components/AddTodo.js","components/LeftNav.js","App.js","index.js"],"names":["TitleComponent","useState","title","setTitle","useLocation","pathname","Header","handleNavSizeChange","className","TodoList","todos","handleDelete","postTaskHandler","sqlDateToDateString","d","temp","Date","getDate","slice","getMonth","map","todo","isDone","deadline","Checkbox","checked","Boolean","onChange","e","event","task","editedTask","handleChange","color","inputProps","onClick","id","Home","closeNav","navSize","history","useHistory","push","Folders","Settings","AddTodo","setTodos","currInput","setCurrInput","dCurrInput","setDCurrInput","value","dropdownRef","useRef","isActive","setIsActive","closeFolder","useEffect","document","addEventListener","handleClick","removeEventListener","current","contains","target","tzoffset","v","offSet","getTimezoneOffset","setHours","toISOString","split","handleSubmit","preventDefault","newTodo","description","folder","onSubmit","type","placeholder","ref","toDateString","locale","LeftNav","style","width","to","activeClassName","App","url","fetchTasks","a","axios","get","response","data","console","log","undefined","post","delete","res","status","setNavSize","smallScreen","useMediaQuery","query","CloseNav","HandleNavSizeChange","exact","path","render","props","component","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.99fc1fad.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst TitleComponent = () => {\r\n  const [title, setTitle] = useState(\"Default smths wrong here\");\r\n  const url = useLocation();\r\n\r\n  switch (url.pathname) {\r\n    case \"/home\":\r\n      if (title !== \"Home\") setTitle(\"Home\");\r\n      break;\r\n    case \"/folders\":\r\n      if (title !== \"Folders\") setTitle(\"Folders\");\r\n      break;\r\n    case \"/settings\":\r\n      if (title !== \"Settings\") setTitle(\"Settings\");\r\n      break;\r\n    case \"/add\":\r\n      if (title !== \"New task\") setTitle(\"New task\");\r\n      break;\r\n    default:\r\n      if (title !== \"Default\") setTitle(\"Default\"); // this should not be shown\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleComponent;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport TitleComponent from \"./TitleComponent\";\r\n\r\n// Navlink vs Link = NavLink enables the usage of activeClassName\r\n// activeClassname for dynamic css styling\r\n\r\nconst Header = ({ handleNavSizeChange }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <TitleComponent />\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@material-ui/core\";\r\n\r\nconst TodoList = ({ todos, handleDelete, postTaskHandler }) => {\r\n  const handleChange = (event, task) => {\r\n    // post check\r\n    const editedTask = { ...task };\r\n    editedTask.isDone = !editedTask.isDone;\r\n    postTaskHandler(editedTask);\r\n    //setChecked(event.target.checked);\r\n  };\r\n\r\n  // Function to convert the sql-date to preferred string with prefixed zeros\r\n  let sqlDateToDateString = (d) => {\r\n    if (d !== null) {\r\n      let temp = new Date(d);\r\n      let dateFormat = `${(\"0\" + temp.getDate()).slice(-2)} - ${(\r\n        \"0\" +\r\n        (temp.getMonth() + 1)\r\n      ).slice(-2)}`;\r\n      return dateFormat;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"todo-items\">Things to do:</h1>\r\n      {todos.map((todo) => (\r\n        <div className=\"todo-item\" key={todo.id}>\r\n          <div className={todo.isDone ? \"task-done\" : \"\"}> {todo.title} </div>\r\n          <div> {sqlDateToDateString(todo.deadline)} </div>\r\n          <div>\r\n            <Checkbox\r\n              checked={Boolean(todo.isDone)}\r\n              onChange={(e) => handleChange(e, todo)}\r\n              color=\"default\"\r\n              inputProps={{ \"aria-label\": \"checkbox with default color\" }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <button onClick={() => handleDelete(todo.id)}>Delete</button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Home = ({ todos, handleDelete, closeNav, navSize, postTaskHandler }) => {\r\n  let history = useHistory();\r\n  let wrapperFunction = () => {\r\n    closeNav();\r\n    history.push(\"/add\");\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className={navSize === \"100%\" ? \"blur\" : \"\"}>\r\n        <TodoList\r\n          todos={todos}\r\n          handleDelete={handleDelete}\r\n          postTaskHandler={postTaskHandler}\r\n        />\r\n      </div>\r\n\r\n      <button className=\"add-btn\" onClick={() => wrapperFunction()}>\r\n        Add task\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Folders = () => {\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"folders\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Folders;\r\n","// useState to replace need for props usage\r\nimport React from \"react\";\r\nconst Settings = () => {\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"settings\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Calendar from \"react-calendar\";\r\n\r\nconst AddTodo = ({ todos, setTodos, navSize, postTaskHandler }) => {\r\n  // title\r\n  const [currInput, setCurrInput] = useState(\"\");\r\n  // description\r\n  const [dCurrInput, setDCurrInput] = useState(null);\r\n  // calendar\r\n  const [value, onChange] = useState(null);\r\n  // dropdown\r\n  const dropdownRef = useRef(null);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const onClick = () => setIsActive(!isActive);\r\n  // handle clicks when clicked outside select folder\r\n  const closeFolder = useRef();\r\n  useEffect(() => {\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, []);\r\n  const handleClick = (e) => {\r\n    if (closeFolder.current.contains(e.target)) {\r\n      // inside click\r\n      return;\r\n    }\r\n    // outside click\r\n    if (isActive) {\r\n      setIsActive(!isActive);\r\n    }\r\n  };\r\n\r\n  // for redirecting\r\n  let history = useHistory();\r\n\r\n  // handle timezone offset for sql-date conversion\r\n  // takes Date.object as an argument\r\n  let tzoffset = (v) => {\r\n    let offSet = v.getTimezoneOffset() / 60;\r\n    if (offSet < 0) {\r\n      offSet = offSet - offSet * 2;\r\n    }\r\n    v.setHours(offSet);\r\n    v = v.toISOString().split(\"T\")[0];\r\n    return v;\r\n  };\r\n\r\n  // function to close dropdownmenu on outside-clicks\r\n\r\n  // here we could send task to sql server and then fetch tasks again\r\n  // currently recreating todos state\r\n  const handleSubmit = (e) => {\r\n    // prevent reload?\r\n    e.preventDefault();\r\n\r\n    // create new task and post it\r\n    const newTodo = {\r\n      title: currInput,\r\n      description: dCurrInput, // add logic here\r\n      deadline: value === null ? null : tzoffset(value),\r\n      folder: \"Default\", // add logic here\r\n    };\r\n    postTaskHandler(newTodo);\r\n\r\n    // set input to empty when submitting -is this needed? works without\r\n    setCurrInput(\"\");\r\n    //setDCurrInput(\"\");\r\n\r\n    // redirect to homepage after submit\r\n    history.push(\"/home\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className={navSize === \"100%\" ? \"blur\" : \"\"}>\r\n        <div className=\"add-todo\">\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Task title\"\r\n              value={currInput}\r\n              onChange={(e) => setCurrInput(e.target.value)}\r\n            />\r\n            <button>Add</button>\r\n          </form>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"description-box\">\r\n              <textarea\r\n                type=\"text\"\r\n                placeholder=\"Task description (optional)\"\r\n                value={dCurrInput}\r\n                onChange={(e) => setDCurrInput(e.target.value)}\r\n              />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"dropdown-menu-container\" ref={closeFolder}>\r\n          Folder selected:\r\n          <br />\r\n          <button onClick={onClick} className=\"folder-button-trigger\">\r\n            Select folder \"This feature is not done yet\"\r\n          </button>\r\n          <div className=\"folders\">\r\n            <nav\r\n              ref={dropdownRef}\r\n              className={`menu ${isActive ? \"active\" : \"inactive\"}`}\r\n            >\r\n              <ul>\r\n                <li>\r\n                  Create Folder\r\n                  <input type=\"text\" placeholder=\"Folder title\"></input>\r\n                </li>\r\n                <li>example</li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n        <div className=\"date-selection-show\">\r\n          Date selected: {value === null ? \"nothing\" : value.toDateString()}\r\n        </div>\r\n        <div className=\"calendar-container\">\r\n          <Calendar value={null} locale={\"en-EN\"} onChange={onChange} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","// useState to replace need for props usage\r\nimport React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\"; // import { Link } from \"react-router-dom\";\r\n\r\nconst LeftNav = ({ navSize, handleNavSizeChange }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"left-sidebar\" style={{ width: navSize }}>\r\n        <nav className=\"navbar\">\r\n          <NavLink\r\n            to={\"/home\"}\r\n            className=\"navlink-home\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            Home\r\n          </NavLink>\r\n          <NavLink\r\n            to={\"/folders\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            Folders\r\n          </NavLink>\r\n          <NavLink\r\n            to={\"/settings\"}\r\n            className=\"navlink\"\r\n            activeClassName={\"active\"}\r\n          >\r\n            Settings\r\n          </NavLink>\r\n        </nav>\r\n      </div>\r\n      <button className=\"burger-btn\" onClick={() => handleNavSizeChange()}>\r\n        Burg\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftNav;\r\n","import \"./App.scss\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport axios from \"axios\";\r\n\r\n// local components\r\nimport Header from \"./components/Header\";\r\nimport Home from \"./components/Home\";\r\nimport Folders from \"./components/Folders\";\r\nimport Settings from \"./components/Settings\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport LeftNav from \"./components/LeftNav\";\r\n\r\nconst App = () => {\r\n  // simulates tasklist fetched from backend\r\n  let url = \"\";\r\n  const useLocalHost = false; // change this to true if u want to use localHost, make sure to start your localhost server then\r\n  useLocalHost\r\n    ? (url = \"http://localhost:8080/api/\")\r\n    : (url = \"https://tamk-4a00ez62-3001-group04.herokuapp.com/api/\");\r\n\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  const fetchTasks = async () => {\r\n    try {\r\n      const response = await axios.get(url + \"/tasks\");\r\n      setTodos(response.data);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const postTaskHandler = async (task) => {\r\n    try {\r\n      if (task.id !== undefined) {\r\n        await axios.post(url + `/tasks/${task.id}`, {\r\n          ...task,\r\n        });\r\n      } else {\r\n        await axios.post(url + \"/tasks\", {\r\n          ...task,\r\n        });\r\n      }\r\n\r\n      fetchTasks(); // Fetch tasks again after a successful post request\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    const res = await axios.delete(url + \"/tasks/\" + id);\r\n    // 204 = ok no content\r\n    if (res.status !== 204) {\r\n      console.log(\"error while deleting\");\r\n      console.log(res);\r\n    }\r\n    fetchTasks();\r\n  };\r\n  const [navSize, setNavSize] = useState(\"0px\");\r\n  let smallScreen = useMediaQuery({ query: \"(max-width: 900px)\" });\r\n  const CloseNav = () => {\r\n    if (smallScreen) {\r\n      setNavSize(\"0px\");\r\n    }\r\n  };\r\n  const HandleNavSizeChange = () => {\r\n    smallScreen\r\n      ? setNavSize(navSize === \"100%\" ? \"0%\" : \"100%\")\r\n      : setNavSize(navSize === \"300px\" ? \"0px\" : \"300px\");\r\n  };\r\n  // deletes task by given id from state\r\n  // TODO change this to delete from sql server\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Header handleNavSizeChange={HandleNavSizeChange} />\r\n      <LeftNav navSize={navSize} handleNavSizeChange={HandleNavSizeChange} />\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/home\" />\r\n        </Route>\r\n\r\n        <Route\r\n          path=\"/home\"\r\n          render={(props) => (\r\n            <Home\r\n              {...props}\r\n              todos={todos}\r\n              handleDelete={handleDelete}\r\n              closeNav={CloseNav}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n            />\r\n          )}\r\n        />\r\n        <Route path={\"/folders\"} component={Folders} />\r\n        <Route path={\"/settings\"} component={Settings} />\r\n        <Route\r\n          path=\"/add\"\r\n          render={(props) => (\r\n            <AddTodo\r\n              {...props}\r\n              todos={todos}\r\n              setTodos={setTodos}\r\n              navSize={navSize}\r\n              postTaskHandler={postTaskHandler}\r\n            />\r\n          )}\r\n        />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}